#!/usr/bin/env pyhton3
# -*- coding: utf-8 -*-
import os
import time
#------------------> Color Code:
RED="\033[01;31m"
BLUE="\033[1;34;40m"
GREEN="\033[01;32;40m"
XX="\033[0m" #--- COLSE COLOR
#------------------>Banner:  
print("\n")
print("\n")
banner ="""
              ▄▄▄▄▄▄▄▄▄▄▄▄                
            ████████████████              
          ███████████████████▌         ██╗███╗  ██╗ ██████╗██████╗ ███████╗ █████╗ ████████╗ █████╗ ██████╗       ██╗  ██╗██╗   ██╗██╗     ██╗  ██╗
        ▐██████████████████████        ██║████╗ ██║██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗      ██║  ██║██║   ██║██║     ██║ ██╔╝
          ▀▀▀▀████████████▀▀▀▀         ██║██╔██╗██║╚█████╗ ██████╔╝█████╗  ██║  ╚═╝   ██║   ██║  ██║██████╔╝█████╗███████║██║   ██║██║     █████═╝
    ▄▄▄██                      ██▄▄▄   ██║██║╚████║ ╚═══██╗██╔═══╝ ██╔══╝  ██║  ██╗   ██║   ██║  ██║██╔══██╗╚════╝██╔══██║██║   ██║██║     ██╔═██╗
  ████████▄▄▄▄▄▄        ▄▄▄▄▄▄████████ ██║██║ ╚███║██████╔╝██║     ███████╗╚█████╔╝   ██║   ╚█████╔╝██║  ██║      ██║  ██║╚██████╔╝███████╗██║ ╚██╗
      ▀▀▀██████████████████████▀▀▀     ╚═╝╚═╝  ╚══╝╚═════╝ ╚═╝     ╚══════╝ ╚════╝    ╚═╝    ╚════╝ ╚═╝  ╚═╝      ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
                                       ═══════════════════════════════════════════════════════════════════════════{\033[01;31mService Enumeration Script v1.0\033[0m}
                                       Tʜɪs sᴄʀɪᴘᴛ ɪs ᴏɴᴇ ᴏғ ᴘʀᴏᴊᴇᴄᴛHULK sᴄʀɪᴘᴛs,ɪᴛ ʜᴀs ʙᴇᴇɴ ᴅᴇsɪɢɴᴇᴅ ᴛᴏ ғᴀsᴛ ʏᴏᴜʀ ᴇɴᴜᴍᴇʀᴀᴛɪᴏɴ ᴀɴᴅ sᴄᴀɴɴɪɴɢ ᴘʀᴏᴄᴇss.
         █                  █          Pʟᴇᴀsᴇ ɴᴏᴛᴇ ᴛʜᴀᴛ ᴛʜɪs sᴄʀɪᴘᴛ ʜᴀs ʙᴇᴇɴ ᴡʀɪᴛᴛᴇɴ ʙᴀsᴇᴅ ᴏɴ ᴛʜᴇ ᴀᴜᴛʜᴏʀ ᴘᴏɪɴᴛ ᴏғ ᴠɪᴇᴡ. Fᴇᴇʟ ғʀᴇᴇ ᴛᴏ ᴄᴏɴᴛᴀᴄᴛ ᴍᴇ ʙᴀᴄᴋ 
          █    ██▀▀▀▀██    █           ᴛᴏ ɪᴍᴘʀᴏᴠᴇ ᴛʜᴇ sᴄʀɪᴘᴛ ғᴏʀ ᴀ ʙᴇᴛᴛᴇʀ ʀᴇsᴜʟᴛ.
           █  ▀        ▀  █               
            ██▄████████▄██
              ▀████████▀
                 ████
"""
print(banner)
time.sleep(1)
print(""+BLUE+"Aᴜᴛʜᴏʀ:"+XX)
time.sleep(0.1)
print("\t     Iʀᴏɴ Hᴜʟᴋ")
print("\tMᴀɴ Iɴ A Bʟᴀᴄᴋ Tᴜxᴇᴅᴏ")
time.sleep(0.1)
print("\n"+BLUE+"Tᴡᴇᴇᴛ Mᴇ:"+XX)
time.sleep(0.1)
print("\tɪʀᴏɴʜᴜʟᴋ_x69")
print("\n"+BLUE+"Sᴘᴏɴsᴏʀ:"+XX)
time.sleep(0.1)
print("\tGɪᴛHᴜʙ: 0xBʟᴀᴄᴋBᴜɴɴɪᴇs")
print("\tTᴇʟᴇɢʀᴀᴍ: https://t.me/ForCyber")
time.sleep(5)
print("\n")
print(RED+"[1] Network Scanning & Enumeration"+XX)
print(RED+"[2] HASH/PASSWORD Cracking Tools"+XX)
print("\n")
SCAN=str(input(BLUE+"[+] What Do You Want The Inspector To Do? (1/2)"+XX))
if SCAN=='1':
    print(RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
    print(RED+" \t\t ══════════════════════════════════════════[ Scanning The Network ]══════════════════════════════════════ "+XX)
    print(RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
    SCAN=str(input(BLUE+"[+] Do you want to can Host/Network? (Y/N) "+XX))
    if SCAN=='Y' or SCAN=='y':
        SCAN=str(input("\n"+BLUE+"[+] Do you want to use Masscan or Nmap? (M/N) "+XX))
        if SCAN=='M' or SCAN=='m':
            print("\n"+BLUE+"[+] Scanning Network using masscan: "+XX)
            IP=input(RED+"[+] Enter IP/Network: "+XX)
            INTR=input(RED+"[+] Set the Interface: "+XX)
            os.system("masscan -e {} -p1-65535,U:1-65535 --rate=1000 {} | tee -a Masscan_Result.txt".format(INTR,IP))
        if SCAN=='N' or SCAN=='n':
            print("\n"+BLUE+"[+] Scanning Network with Nmap: "+XX)
            IP=input(RED+"[+] Enter IP/Network: "+XX)
            os.system("nmap -Pn {} | tee -a Nmap_Result.txt".format(IP))
    if SCAN=='N' or SCAN=='n':
        print("\n")
    else:
        print("\n[X] Wrong Option")
        exit()
    SCAN=str(input(BLUE+"[+] Do you want to run advance nmap scanning on open ports? (Y/N) "+XX))
    if SCAN=='Y' or SCAN=='y':
        print("\n"+RED+"[+] Please note that this scan may take time, please be patient"+XX)
        SCAN=str(input(BLUE+"[+] Is it TCP or UDP? (T/U) "+XX))
        if SCAN=='T' or SCAN=='t':
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Open TCP Port separated with comma ',': "+XX)
            print(RED+"[+] Please be patiente while we enumerate the ports"+XX)
            os.system("nmap -sC -sS -sV -n -A -Pn -p {} --reason --script vuln --script auth {} | tee -a Nmap_TCP_Result.txt".format(PORT,IP))
        if SCAN=='U' or SCAN=='u':
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Open UDP Port separated with comma ',': "+XX)
            print(RED+"[+] Please be patiente while we enumerate the ports"+XX)
            os.system("nmap -sU -sV -p {} --reason --script vuln | tee -a Nmap_UDP_Result.txt".format(PORT,IP))
    if SCAN=='N' or SCAN=='n':
        print("\n")
    else:
        print("\n[X] Wrong Option")
        exit()
    print("\n\n")
    print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
    print("\t"+RED+" \t\t ═══════════════════════════════════════[ What to Scan ]═════════════════════════════════════════════════ "+XX)
    print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
    print("\n")
    print("\t\t1- Web             11- NNTP               21- WP Scan                         31- netbios-ns Samba nmbd netbios-ns")
    print("\t\t2- SSH             12- IMAP               22- MongoDB                         32- My SQL Server")
    print("\t\t3- IRC             13- LDAP               23- svn server")
    print("\t\t4- FTP             14- MsSQL              24- SMB/NetBios")
    print("\t\t5- DNS             15- MSRPC              25- kerberos-sec")
    print("\t\t6- RDP             16- Rsync              26- Apache JServ")
    print("\t\t7- TFTP            17- Finger             27- Redis service")
    print("\t\t8- SMTP            18- Telnet             28- IPsec/IKE VPN")
    print("\t\t9- POP3            19- Rlogin             29- Oracl DataBase")
    print("\t\t10- SNMP           20- Docker             30- Virtual Network Computing (VNC)")
    option=int(input("\n"+BLUE+"Select an option (1-31): "+XX))
    #----- Web Scan:
    if option ==1: 
        print("1- WAF Scan")
        print("2- Nmap Scan")
        print("3- fuff Scan")
        print("4- CURL Scan")
        print("5- CEWL Scan")
        print("6- Nikto Scan")
        print("7- WebDav Scan")
        print("8- Drupal Scan")
        print("9- Whatweb Scan")
        print("10- Shellshock Scan")
        print("11- All the above scan")
        SCAN=int(input("\n"+BLUE+"Select your Scan: "+XX))
        if SCAN==1:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ WAF Scan ]════════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WAF_Enumeration")
            print("\n\t WAF_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using waffw00f: "+XX)
            os.system("wafw00f -a {} 2>/dev/null".format(URL))
            print("\n"+BLUE+"[+] Scanning using Nmap waf-detect: "+XX)
            os.system("nmap -sC -p {} --script http-waf-fingerprint --script http-waf-detect --script http-waf-detect.nse {} 2>/dev/null | tee -a WAF_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap http-webdav-scan: "+XX)
            os.system("nmap -sC -p {} --script http-webdav-scan {} 2>/dev/null | tee -a WAF_Enumeration/webdav.txt".format(PORT,IP))
        elif SCAN==2:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Nmap Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Nmap_Scan")
            print("\n\t Nmap_Scan Folder Created")
            print("\n"+BLUE+"[+] Scanning with Nmap script: "+XX)
            os.system("nmap -sV --script=http-enum --reason -p {} {} 2>/dev/null | tee -a Nmap_Scan/Nmap_Script.txt".format(PORT,IP)) 
            print("\n"+BLUE+"[+] Nmap Using vuln script: "+XX)
            os.system("nmap -sV --script vuln --script=http-vuln* -p {} {} 2>/dev/null | tee -a Nmap_Scan/Nmap_Vuln.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Nmap Using ssl-heartbleed script: "+XX)
            os.system("nmap -sC --script ssl-heartbleed -p {} {} 2>/dev/null | tee -a Nmap_Scan/hearbleed.txt".format(PORT,IP))
        elif SCAN==3:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Directory Scan ]══════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            WORD=input(RED+"[+] Path To Wordlist: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Directory_scan")
            print("\n\t Directory_scan Folder Created")
            print("\n"+BLUE+"[+] Using fuff: "+XX)
            os.system("ffuf -c -w {} -u {}/FUZZ -t 200 | tee -a Directory_scan/fuff.txt".format(WORD,URL))
        elif SCAN==4:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ CURL Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir CURL_Scan")
            print("\n\t CURL_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting CURL: "+XX)
            os.system("curl -i -L {} 2>/dev/null | tee -a CURL_Scan/CURL.txt".format(URL))
            print("\n"+BLUE+"[+] Is put allowed on the directory: "+XX)
            os.system("curl --head -X OPTIONS {} 2>/dev/null | tee -a CURL_Scan/PUT_Scan.txt".format(URL))
        elif SCAN==5:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ CEWL Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir CEWL_Scan")
            print("\n\t CEWL_Scan Folder Created")
            print("\n"+BLUE+"[+] Creating Custom List: "+XX)
            os.system("cewl {} --with-numbers > custom.txt".format(URL))
            print("\n"+BLUE+"[+] Scanning for Directory: "+XX)
            os.system("ffuf -c -w custom.txt -u {}/FUZZ -t 200 | tee -a CEWL_Scan/CEWL.txt".format(URL))
        elif SCAN==6:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Nikto Scan ]══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Nekto_Scan")
            print("\n\t Nikto_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting Nikto Scan: "+XX)
            os.system("nikto -h {} 2>/dev/null | tee -a Nikto_Scan/Nikto.txt".format(URL))
        elif SCAN==7:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ WebDav Scan ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WebDav_Scan")
            print("\n\t WebDav_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting davtest Scan: "+XX)
            os.system("davtest -url {}/dev | tee -a WebDav_Scan/WebDav.txt".format(URL))
        elif SCAN==8:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Drupal Scan ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Drupal_Scan")
            print("\n\t Drupal_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting Drupal Scan: "+XX)
            os.system("nmap -p {} --script http-drupal-enum {} 2>/dev/null| tee -a Drupal_Scan/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Downloading Droopscan: "+XX)
            os.system("git clone https://github.com/droope/droopescan.git && cd droopescan && pip3 install . 2>/dev/null ")
            print("\n"+BLUE+"[+] Running Droopscan: "+XX)
            os.system("droopescan scan drupal -u {}/ -t 32 2>/dev/null | tee -a Drupal_Scan/Drupal.txt".format(URL))
        elif SCAN==9:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Whatweb Scan ]════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WhatWeb_Scan")
            print("\n\t WhatWeb_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting whatweb Scan: "+XX)
            os.system("whatweb -a 3 {} -v | tee -a WhatWeb_Scan/WhatWeb.txt".format(URL))
        elif SCAN==10:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Shellshcok Scan ]═════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Shellshcok_Scan")
            print("\n\t Shellshcok_Scan Folder Created")
            print("\n"+BLUE+"[+] Scanning with namp: "+XX)
            os.system("nmap -p {} --script=http-shellshock {} --script-args uri=/cgi-bin/ | tee -a Shellshcok_Scan/Shellshcok.txt".format(PORT,IP))
        elif SCAN==11:
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            PROTO=input(RED+"[+] Protocol HTTP/HTTPS: "+XX)
            URL=input(RED+"[+] Enter URL: "+XX)
            WORD=input(RED+"[+] Path To Wordlist: "+XX)
            print("\n"+BLUE+"[+] Scanning using waffw00f: "+XX)
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ WAF Scan ]════════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WAF_Enumeration")
            print("\n\t WAF_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using waffw00f: "+XX)
            os.system("wafw00f -a {} 2>/dev/null".format(URL))
            print("\n"+BLUE+"[+] Scanning using Nmap waf-detect: "+XX)
            os.system("nmap -sC -p {} --script http-waf-fingerprint --script http-waf-detect --script http-waf-detect.nse {} 2>/dev/null | tee -a WAF_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap http-webdav-scan: "+XX)
            os.system("nmap -sC -p {} --script http-webdav-scan {} 2>/dev/null | tee -a WAF_Enumeration/webdav.txt".format(PORT,IP))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Nmap Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Nmap_Scan")
            print("\n\t Nmap_Scan Folder Created")
            print("\n"+BLUE+"[+] Scanning with Nmap script: "+XX)
            os.system("nmap -sV --script=http-enum --reason -p {} {} 2>/dev/null | tee -a Nmap_Scan/Nmap_Script.txt".format(PORT,IP)) 
            print("\n"+BLUE+"[+] Nmap Using vuln script: "+XX)
            os.system("nmap -sV --script vuln --script=http-vuln* -p {} {} 2>/dev/null | tee -a Nmap_Scan/Nmap_Vuln.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Nmap Using ssl-heartbleed script: "+XX)
            os.system("nmap -sC --script ssl-heartbleed -p {} {} 2>/dev/null | tee -a Nmap_Scan/hearbleed.txt".format(PORT,IP))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Directory Scan ]══════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Directory_scan")
            print("\n\t Directory_scan Folder Created")
            print("\n"+BLUE+"[+] Using fuff: "+XX)
            os.system("ffuf -c -w {} -u {}/FUZZ -t 200 | tee -a Directory_scan/fuff.txt".format(WORD,URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ CURL Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir CEWL_Scan")
            print("\n\t CEWL_Scan Folder Created")
            print("\n"+BLUE+"[+] Creating Custom List: "+XX)
            os.system("cewl {} --with-numbers > custom.txt".format(URL))
            print("\n"+BLUE+"[+] Scanning for Directory: "+XX)
            os.system("ffuf -c -w custom.txt -u {}/FUZZ -t 200 | tee -a CEWL_Scan/CEWL.txt".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ CEWL Scan ]═══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating Custom List: "+XX)
            os.system("cewl {} --with-numbers > custom.txt".format(URL))
            print("\n"+BLUE+"[+] Scanning for Directory"+XX)
            os.system("ffuf -c -w custom.txt -u {}/FUZZ -t 200".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Nikto Scan ]══════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Nekto_Scan")
            print("\n\t Nikto_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting Nikto Scan: "+XX)
            os.system("nikto -h {} 2>/dev/null | tee -a Nikto_Scan/Nikto.txt".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ WebDav Scan ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WebDav_Scan")
            print("\n\t WebDav_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting davtest Scan: "+XX)
            os.system("davtest -url {}/dev | tee -a WebDav_Scan/WebDav.txt".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Drupal Scan ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Drupal_Scan")
            print("\n\t Drupal_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting Drupal Scan: "+XX)
            os.system("nmap -p {} --script http-drupal-enum {} 2>/dev/null| tee -a Drupal_Scan/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Downloading Droopscan: "+XX)
            os.system("git clone https://github.com/droope/droopescan.git && cd droopescan && pip3 install . 2>/dev/null ")
            print("\n"+BLUE+"[+] Running Droopscan: "+XX)
            os.system("droopescan scan drupal -u {}/ -t 32 2>/dev/null | tee -a Drupal_Scan/Drupal.txt".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Whatweb Scan ]════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WhatWeb_Scan")
            print("\n\t WhatWeb_Scan Folder Created")
            print("\n"+BLUE+"[+] Starting whatweb Scan: "+XX)
            os.system("whatweb -a 3 {} -v | tee -a WhatWeb_Scan/WhatWeb.txt".format(URL))
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Shellshcok Scan ]═════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Shellshcok_Scan")
            print("\n\t Shellshcok_Scan Folder Created")
            print("\n"+BLUE+"[+] Scanning with namp: "+XX)
            os.system("nmap -p {} --script=http-shellshock {} --script-args uri=/cgi-bin/ | tee -a Shellshcok_Scan/Shellshcok.txt".format(PORT,IP))
        else:
            print("Thank You For Using Our Tool")
    #----- SSH Scan:
    if option ==2:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t SSH or Secure Shell or Secure Socket Shell,is a network protocol that gives users a secure way to access a")
            print("\t computer over an unsecured network")
            print("\n"+BLUE+"[+] Enter the below details to start SSH Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir SSH_Enumeration")
            print("\n\t SSH_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sC -sV -n -p {} --version-all --script=ssh-hostkey --script vuln --script ssh2-enum-algos {} 2>/dev/null | tee -a SSH_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap Vuln Scripts: "+XX)
            os.system("nmap -sC -p {} -sV --reason --script vuln {} 2>/dev/null | tee -a SSH_Enumeration/Nmap_Vuln.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Brute Force Default-Creds: "+XX)
            os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt -e nsr -f ssh://{} 2>/dev/null | tee -a SSH_Enumeration/Default-Credentials.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SSH Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa: "+XX)
                    os.system("medusa -U {} -P {} -h {} -M ssh -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting hydra: "+XX)
                    os.system("hydra -L {} -P {} {} ftp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- IRC Scan:
    if option ==3:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Internet Relay Chat (IRC) uses a client-server model to provide a chatroom. A single IRC server is set up,and")
            print("\t users connect to the server via IRC clients. The protocol allows users to set usernames on the server and engage in")
            print("\t private chats or group chats via different IRC channels.")
            print("\n"+BLUE+"[+] Enter the below details to start IRC Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir IRC_Enumeration")
            print("\n\t IRC_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts on defualt ports: "+XX)
            os.system("nmap -sV -p 194,6660-7000 --reason --script vuln {} 2>/dev/null | tee -a IRC_Enumeration/Nmap_Script.txt".format(IP))
            print("\n"+BLUE+"[+] Scanning for backdoor on defualt ports: "+XX)
            os.system("nmap -sV --script irc-botnet-channels,irc-info,irc-unrealircd-backdoor -p 194,6660-7000 {} 2>/dev/null | tee -a IRC_Enumeration/Nmap_Script.txt".format(IP))
    #----- FTP Scan:
    if option ==4:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t The File Transfer Protocol (FTP) is a standard network protocol used for the transfer of computer files between a")
            print("\t client and server on a computer network.")
            print("\n"+BLUE+"[+] Enter the below details to start FTP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir FTP_Enumeration")
            print("\n\t FTP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap vuln Script: "+XX)
            os.system("nmap -sV --reason --script vuln --script=ftp-* -p {} {} 2>/dev/null | tee -a FTP_Enumeration/Nmap_vuln.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Brute Force Default-Creds"+XX)
            os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt {} ftp -t 50 2>/dev/null | tee -a FTP_Enumeration/Default-Credentials.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce FTP Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} ftp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
            else:
                print("\n[X] Wrong Option")
                exit()
    #----- DNS Scan:
    if option ==5:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t The Domain Name Systems (DNS) is the phonebook of the Internet. Humans access information online through domain")
            print("\t names. DNS translates domain names to IP addresses so browsers can load Internet resources.")
            print("\n"+BLUE+"[+] Enter the below details to start DNS Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            DOMAIN=IP=input(RED+"[+] Enter Domain: "+XX)
            SUB=IP=input(RED+"[+] Subdomain Wordlist: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir DNS_Enumeration")
            print("\n\t DNS_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap dns-nsid Script: "+XX)
            os.system("nmap --script dns-nsid -p {} {} 2>/dev/null | tee -a DNS_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap vuln Script: "+XX)
            os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null | tee -a DNS_Enumeration/Nmap_Vuln.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] UDP Scan: "+XX)
            os.system("nmap -sS -sU -p {} -n {} 2>/dev/null | tee -a DNS_Enumeration/Nmap_UDP.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] dnsenum scan: "+XX)
            os.system("dnsenum -enum {} 2>/dev/null | tee -a DNS_Enumeration/DNS-Enum.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] Subdomain: "+XX)
            os.system("dnsenum -f {} -u a -r {} 2>/dev/null | tee -a DNS_Enumeration/Subdomain.txt".format(SUB,DOMAIN))
            print("\n"+BLUE+"[+] Whois result: "+XX)
            os.system("whois {} 2>/dev/null | tee -a DNS_Enumeration/whois.txt".format(IP))
            print("\n"+BLUE+"[+] Host result: "+XX)
            os.system("host {} 2>/dev/null | tee -a DNS_Enumeration/Host.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] Host nameserver result: "+XX)
            os.system("host -t ns {} 2>/dev/null | tee -a DNS_Enumeration/Host_NameServer.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] Host mailexchange result: "+XX)
            os.system("host -t mx {} 2>/dev/null | tee -a DNS_Enumeration/Host_MailExchange.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] dig Get IP result: "+XX)
            os.system("dig {} 2>/dev/null | tee -a DNS_Enumeration/Dig_IP.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] dig nameserver result: "+XX)
            os.system("dig {} NS 2>/dev/null | tee -a DNS_Enumeration/Dig_NameServer.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] Get TXT records: "+XX)
            os.system("dig {} TXT 2>/dev/null | tee -a DNS_Enumeration/Dig_TXTRecord.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] DIG all the things: "+XX)
            os.system("dig {} ANY 2>/dev/null | tee -a DNS_Enumeration/Dig_AllTheThings.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] dig Find Zone Transfer result: "+XX)
            os.system("dig axfr @{} 2>/dev/null | tee -a DNS_Enumeration/Dig_ZoneTransfer.txt".format(IP))
            print("\n"+BLUE+"[+] dnsrecon result: "+XX)
            os.system("dnsrecon -d {} -g 2>/dev/null | tee -a DNS_Enumeration/DNS_Recone.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] dns bruteforce result: "+XX)
            os.system("dnsrecon -d {} -D /usr/share/wordlists/dnsmap.txt -t std 2>/dev/null | tee -a DNS_Enumeration/DNS_Bruteforce.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] Find Virtual Host by fiercon: "+XX)
            os.system("fiercon -dns abc.com 2>/dev/null | tee -a DNS_Enumeration/Virtual_Host.txt".format(DOMAIN))
            print("\n"+BLUE+"[+] nslookup result: "+XX)
            os.system("nslookup")
            os.system("set querytype=any")
            os.system("SERVER {}".format(IP))
            os.system("{} 2>/dev/null".format(IP))
    #----- RDP Scan:
    if option ==6:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Remote Desktop Protocol (RDP) is a proprietary protocol developed by Microsoft,which provides a user with a")
            print("\t graphical interface to connect to another computer over a network connection. The user employs RDP client software")
            print("\t for this purpose,while the other computer must run RDP server software")
            print("\n"+BLUE+"[+] Enter the below details to start RDP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir RDP_Enumeration")
            print("\n\t RDP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Script: "+XX)
            os.system('nmap --reason --script vuln --script "rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info" -p {} -T4 {} 2>/dev/null | tee -a RDP_Enumeration/Nmap_Script.txt'.format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce RDP Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M rdp -t {} -f -F 2>/dev/null | tee -a RDP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} rdp -t 50 -s {} 2>/dev/null | tee -a RDP_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- TFTP Scan:
    if option ==7:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t TFTP uses UDP port 69 and requires no authentication—clients read from,and write to servers using the datagram")
            print("\t format outlined in RFC 1350. Due to deficiencies within the protocol (namely lack of authentication and no transport")
            print("\t security),it is uncommon to find servers on the public Internet. Within large internal networks,however,TFTP is used")
            print("\t to serve configuration files and ROM images to VoIP handsets and other devices.")
            print("\n"+BLUE+"[+] Enter the below details to start TFTP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir TFTP_Enumeration")
            print("\n\t FTP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Script: "+XX)
            os.system("nmap -n -Pn -sU -p {} -sV --script vuln --script tftp-enum --script-args tftp-enum.filelist=customlist.txt {} 2>/dev/null | tee -a TFTP_Enumeration/Nmap_Script.txt".format(PORT,IP))
    #----- SMTP Scan:
    if option ==8:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t SMTP (Simple Mail Transfer Protocol) is a TCP/IP protocol used in sending and receiving e-mail,it is usually used")
            print("\t with one of two other protocols,POP3 or IMAP,that let the user save messages in a server mailbox and download them ")
            print("\t periodically from the server.")
            print("\n"+BLUE+"[+] Enter the below details to start SMTP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            WORD=input(RED+"[+] Path To Wordlist: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir SMTP_Enumeration")
            print("\n\t SMTP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap smtp-commands Script: "+XX)
            os.system("nmap -p {} --script smtp-commands  --reason --script vuln {} 2>/dev/null | tee -a SMTP_Enumeration/Nmap_Scripts.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap smtp-enum-users.nse Script: "+XX)
            os.system("nmap -p {} --script smtp-enum-users.nse {} 2>/dev/null | tee -a SMTP_Enumeration/Nmap_enum-user.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] smtp-user-enum using custom wordlist: "+XX)
            os.system("smtp-user-enum -M VRFY -U {} -t {} 2>/dev/null | tee -a SMTP_Enumeration/smtp-user-enum.txt".format(WORD,IP))
            print("\n"+BLUE+"[+] smtp-user-enum using unix_users.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t {} 2>/dev/null | tee -a SMTP_Enumeration/unix_user_list".format(IP))
            print("\n"+BLUE+"[+] smtp-user-enum using Seclist names.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/Names/names.txt -t {} 2>/dev/null | tee -a SMTP_Enumeration/Seclist_name.txt".format(IP))
            print("\n"+BLUE+"[+] smtp-user-enum using top-usernames-shortlist.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top-usernames-shortlist.txt -t {} 2>/dev/null | tee -a SMTP_Enumeration/shortlist.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SMTP Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M smtp -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} smtp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- POP3 Scan:
    if option ==9:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Post Office Protocol (POP) is a type of computer networking and Internet standard protocol that extracts and ")
            print("\t retrieves email from a remote mail server for access by the host machine. POP is an application layer protocol in ")
            print("\t the OSI model that provides end users the ability to fetch and receive email.")
            print("\n"+BLUE+"[+] Enter the below details to start POP3 Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            WORD=input(RED+"[+] Path To Wordlist: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir POP3_Enumeration")
            print("\n\t POP3_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Script: "+XX)
            os.system("nmap -p {} --reason --script vuln --script pop3-ntlm-info {} 2>/dev/null | tee -a POP3_Enumeration/Nmap_Scrit.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] smtp-user-enum using custom wordlist: "+XX)
            os.system("smtp-user-enum -M VRFY -U {} -t {} 2>/dev/null | tee -a POP3_Enumeration/smtp-user-enum.txt".format(WORD,IP))
            print("\n"+BLUE+"[+] Running smtp-user-enum using metasploit unix_users.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t {} 2>/dev/null | tee -a POP3_Enumeration/unix_users.txt".format(IP))
            print("\n"+BLUE+"[+] Running smtp-user-enum using Seclist names.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/Names/names.txt -t {} 2>/dev/null | tee -a POP3_Enumeration/Seclist_name.txt".format(IP))
            print("\n"+BLUE+"[+] Running smtp-user-enum using top-usernames-shortlist.txt: "+XX)
            os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top-usernames-shortlist.txt -t {} 2>/dev/null | tee -a POP3_Enumeration/Shortlist.txt".format(IP))
    #----- SNMP Scan:
    if option ==10:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t SNMP Stands for Simple Network Management Protocol and it is used for exchanging management information between ")
            print("\t network devices. SNMPv1 and SNMPv2 utilize clear text communications.")
            print("\n"+BLUE+"[+] Enter the below details to start SNMP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            WORD=input(RED+"[+] Path To Wordlist: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir SNMP_Enumeration")
            print("\n\t SNMP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV -sC -p {} --reason --script vuln --script nbstat.nse {} 2>/dev/null | tee -a SNMP_Enumeration/Nmap_Scripts.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap os discovery & Protocol Script: "+XX)
            os.system("nmap -sV -sC -p {} --script smb-os-discovery.nse --script smb-protocols {} 2>/dev/null | tee -a SNMP_Enumeration/Nmap_Discovery.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap enum-users & enum-shares Script: "+XX)
            os.system("nmap -sV -sC -p {} --script smb-enum-users.nse --script smb-enum-shares.nse  {} 2>/dev/null | tee -a SNMP_Enumeration/User_Shares.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Running enum4linux: "+XX)
            os.system("enum4linux -a {} 2>/dev/null | tee -a SNMP_Enumeration/enum4linux.txt".format(IP))
            print("\n"+BLUE+"[+] Downloading nullinux: "+XX)
            os.system("git clone https://github.com/m8r0wn/nullinux && cd nullinux && sudo bash setup.sh 2>/dev/null")
            print("\n"+BLUE+"[+] Running nullinux: "+XX)
            os.system("nullinux {} 2>/dev/null | tee -a SNMP_Enumeration/nullinux.txt".format(IP))
            print("\n"+BLUE+"[+] Running crackmapexec: "+XX)
            os.system("crackmapexec smb {} 2>/dev/null | tee -a SNMP_Enumeration/crackmapexec.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Running smbclient: "+XX)
            os.system("smbclient -L \{} 2>/dev/null | tee -a SNMP_Enumeration/smbclient.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Running smbmap: "+XX)
            os.system("smbmap -H {} 2>/dev/null | tee -a SNMP_Enumeration/smbmap.txt".format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SNMP Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M smb -f -F -t {} 2>/dev/null | tee -a SNMP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} smb -t 50 2>/dev/null | tee -a SNMP_Enumeration/Hydra.txt".format(USER,PASS,IP))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- NNTP Scan:
    if option ==11:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t NNTP is an application-layer protocol used for transporting Usenet news articles between news servers. Client ")
            print("\t applications can also inquire,retrieve,and post articles.")
            print("\n"+BLUE+"[+] Enter the below details to start NNTP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir NNTP_Enumeration")
            print("\n\t NNTP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir NNTP_Enumeration")
            print("\n\t SNMP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -p {} --script nntp-ntlm-info --reason --script vuln {} 2>/dev/null | tee -a NNTP_Enumeration/Nmap_Scritps.txt".format(PORT,IP))
    #----- IMAP Scan:
    if option ==12:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t IMAP allows you to access your email messages wherever you are; much of the time,it is accessed via the Internet.")
            print("\t Basically,email messages are stored on servers. Whenever you check your inbox,your email client contacts the server")
            print("\t to connect you with your messages.When you read an email message using IMAP,you aren't actually downloading or storing")
            print("\t it on your computer; instead,you are reading it off of the server. As a result,it's possible to check your email from")
            print("\t several different devices without missing a thing")
            print("\n"+BLUE+"[+] Enter the below details to start IMAP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir IMAP_Enumeration")
            print("\n\t IMAP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV -p {} --reason --script vuln --script imap-capabilities,imap-ntlm-info {} 2>/dev/null | tee -a IMAP_Enumeration/Nmap_Script.txt".format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce IMAP Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M imap -t {} -f -F 2>/dev/null | tee -a IMAP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} imap -s {} 2>/dev/null | tee -a IMAP_Enumeration/Hydra".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- LDAP Scan:
    if option ==13:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t LDAP (Lightweight Directory Access Protocol) is a software protocol for enabling anyone to locate organizations,")
            print("\t individuals,and other resources such as files and devices in a network,whether on the public Internet or on a ")
            print("\t corporate intranet. LDAP is a 'lightweight' (smaller amount of code) version of Directory Access Protocol (DAP).")
            print("\n"+BLUE+"[+] Enter the below details to start LDAP Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir LDAP_Enumeration")
            print("\n\t LDAP_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -n -sV -p {} --script 'ldap* and not brute' --reason --script vuln {} 2>/dev/null | tee -a LDAP_Enumeration/Nmap_Script.txt".format(PORT,IP))
    #----- MsSQL Scan:
    if option ==14:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Microsoft SQL Server is a relational database management system developed by Microsoft. As a database server,it's")
            print("\t a software product with the primary function of storing and retrieving data as requested by other software applications")
            print("\t which may run either on the same computer or on another computer across a network (including the Internet.")
            print("\n"+BLUE+"[+] Enter the below details to start MsSQL Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir MsSQL_Enumeration")
            print("\n\t MsSQL_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port={},mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p {} {} 2>/dev/null | tee -a MsSQL_Enumeration/Nmap_Script.txt".format(PORT,PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap Vuln Scripts: "+XX)
            os.system(" nmap -sV  --reason --script vuln -p {} {} 2>/dev/null | tee -a MsSQL_Enumeration/Nmap_Vuln_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Brute Force Default-Creds: "+XX)
            os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt {} mssql -t 50 2>/dev/null | tee -a MsSQL_Enumeration/Default-Creds.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce MsSQL Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M mssql -t {} -f -F 2>/dev/null | tee -a MsSQL_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} mssql -t 50 -s {} 2>/dev/null | tee -a MsSQL_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- MSRPC Scan:
    if option ==15:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Microsoft Remote Procedure Call,also known as a function call or a subroutine call,is a protocol that uses the")
            print("\t client-server model in order to allow one program to request service from a program on another computer without having")
            print("\t to understand the details of that computer's network. MSRPC was originally derived from open source software but has")
            print("\t been developed further and copyrighted by Microsoft.")
            print("\n"+BLUE+"[+] Enter the below details to start MSRPC Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir MSRPC_Enumeration")
            print("\n\t MSRPC_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -n -v -sV -Pn -p {} --script=msrpc-enum {} 2>/dev/null | tee -a MSRPC_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using rpcinfo tool: "+XX)
            os.system("rpcinfo -p {} {} 2>/dev/null | tee -a MSRPC_Enumeration/rpcinfo.txt".format(PORT,IP))
    #----- Rsync Scan:
    if option ==16:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t rsync is a utility for efficiently transferring and synchronizing files between a computer and an external hard")
            print("\t drive and across networked computers by comparing the modification timesand sizes of files.[3] It is commonly found")
            print("\t on Unix-like operating systems. The rsync algorithm is a type of delta encoding,and is used for minimizing network")
            print("\t usage. Zlib may be used for additional data compression,[3] and SSH or stunnel can be used for security.")
            print("\n"+BLUE+"[+] Enter the below details to start Rsync Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Rsync_Enumeration")
            print("\n\t Rsync_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --script 'rsync-list-modules' -p {} {} 2>/dev/null | tee -a Rsync_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using rsync tool: "+XX)
            os.system("rsync -av --list-only rsync://{}/ 2>/dev/null | tee -a Rsync_Enumeration/rsync.txt".format(IP))
    #----- Finger Scan:
    if option ==17:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Finger is a program you can use to find information about computer users. It usually lists the login name,the")
            print("\t full name,and possibly other details about the user you are fingering. These details may include the office location")
            print("\t and phone number (if known),login time,idle time,time mail was last read,and the user's plan and project files.")
            print("\n"+BLUE+"[+] Enter the below details to start Finger Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            USER=input(RED+"[+] User List: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Finger_Enumeration")
            print("\n\t Finger_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null | tee -a Finger_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] List of logged in users: "+XX)
            os.system("finger @{} 2>/dev/null | tee -a Finger_Enumeration/Logged_in_user.txt".format(IP))
    #----- Telnet Scan:
    if option ==18:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Telnet is a network protocol that gives users a UNsecure way to access a computer over a network.")
            print("\n"+BLUE+"[+] Enter the below details to start Telnet Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Telnet_Enumeration")
            print("\n\t Telnet_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -n -sV -P 23 --script '*telnet* and safe' --reason --script vuln --script=telnet-ntlm-info.nse -p {} {} 2>/dev/null | tee -a Telnet_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Brute Force Default-Creds: "+XX)
            os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/telnet-betterdefaultpasslist.txt -e nsr -f -s {} {} 2>/dev/null | tee -a Telnet_Enumeration/Default-Creds.txt".format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Telnet Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M telnet -t {} -f -F 2>/dev/null | tee -a Telnet_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} telnet -t 50 -s {}2>/dev/null | tee -a Telnet_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- Rlogin Scan:
    if option ==19:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t This service was mostly used in the old days for remote administration but now because of security issues this")
            print("\t service has been replaced by the slogin and the ssh.")
            print("\n"+BLUE+"[+] Enter the below details to start Rlogin Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Rlogin_Enumeration")
            print("\n\t Rlogin_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -p {} --script rlogin-brute {} 2>/dev/null | tee -a Rlogin_Enumeration/Nmap_Script.txt".format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Rlogin Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M rlogin -t {} -f -F 2>/dev/null | tee -a Rlogin_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} rlogin -t 50 -s {} 2>/dev/null | tee -a Rlogin_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- Docker Scan:
    if option ==20:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Enter the below details to start Docker Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Docker_Enumeration")
            print("\n\t Docker_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --script 'docker-*' --reason --script vuln -p {} {} 2>/dev/null | tee -a Docker_Enumeration/Nmap_Scripts.txt".format(PORT,IP))
    #----- WP Scan:
    if option ==21:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Enter the below details to start Word Press Enumeration: "+XX)
            URL=input(RED+"[+] Enter WP Path: "+XX)
            API=input(RED+"[+] Enter api-token: "+XX)
            print("\n"+BLUE+"[+] Updating Word Press DB: "+XX)
            os.system("wpscan --update")
            print("1- Full Scan")
            print("2- User Scan")
            print("3- Thems Scan")
            print("4- Plugins Scan")
            print("5- Brute force")
            SCAN=int(input("\n"+BLUE+"Select your Scan: "+XX))
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir WP_Scan")
            print("\n\t WP_Scan Folder Created")
            if SCAN==1:
                print("\n"+BLUE+"[+] Running Fullscan: "+XX)
                os.system("wpscan --url {} --enumerate ap,at,cb,dbe --api-token {} 2>/dev/null | tee -a WP_Scan/Fullscan.txt".format(URL,API))
            if SCAN==2:
                print("\n"+BLUE+"[+] Running User scan: "+XX)
                os.system("wpscan --url {} --enumerate u --api-token {} 2>/dev/null | tee -a WP_Scan/User_Scan.txt".format(URL,API))
            if SCAN==3:
                print("\n"+BLUE+"[+] Running Them scan: "+XX)
                os.system("wpscan --url {} --enumerate vt --api-token {} 2>/dev/null | tee -a WP_Scan/Them_Scan.txt".format(URL,API))
                SCAN=str(input(BLUE+"[+] Do you want to fuzz? (Y/N): "+XX))
                if SCAN=='Y' or SCAN=='y':
                    FUZZ=input(RED+"[+] Word List to use: "+XX)
                    print("\n"+BLUE+"[+] Starting Fuzzing"+XX)
                    os.system("wfuzz -c -w {} -t 40 --hc 404 {}/FUZZ 2>/dev/null | tee -a WP_Scan/Them_fuzz.txt".format(FUZZ,URL))
                else:
                    print("Thank You For Using Our Tool")
                    exit()
            if SCAN==4:
                print("\n"+BLUE+"[+] Running Plugin Scan: "+XX)
                os.system("wpscan --url {} --enumerate vp --api-token {} 2>/dev/null | tee -a WP_Scan/Plugin_Scan.txt".format(URL,API))
                SCAN=str(input(BLUE+"[+] Do you want to fuzz? (Y/N): "+XX))
                if SCAN=='Y' or SCAN=='y':
                    FUZZ=input(RED+"[+] Word List to use: "+XX)
                    print("\n"+BLUE+"[+] Starting Fuzzing"+XX)
                    os.system("wfuzz -c -w {} -t 40 --hc 404 {}/FUZZ  2>/dev/null | tee -a WP_Scan/Plugin_Fuzz.txt".format(FUZZ,URL))
                else:
                    print("Thank You For Using Our Tool")
                    exit()
            if SCAN==5:
                NAME=input(RED+"[+] User List Path: "+XX)
                PASS=input(RED+"[+] Pass List Path: "+XX)
                print("\n"+BLUE+"[+] Scan,Enumerate users and Brutforce them: "+XX)
                os.system("wpscan --url {} --passwords {} -t 100 2>/dev/null | tee -a WP_Scan/User_Bruteforce.txt".format(URL,PASS))
                print("\n"+BLUE+"[+] Running Bruteforce Scan: "+XX)
                os.system("wpscan --url {} --usernames {} -P {} -t 100 2>/dev/null| tee -a WP_Scan/Bruteforce.txt".format(URL,NAME,PASS))
            else:
                print("Thank You For Using Our Tool")
                exit()
    #----- MongoDB Scan:
    if option ==22:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t MongoDB is an open source database management system (DBMS) that uses a document-oriented database model which")
            print("\t supports various forms of data. ")
            print("\n"+BLUE+"[+] Enter the below details to start MongoDB Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir MongoDB_Enumeration")
            print("\n\t MongoDB_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --script 'mongo* and default' -p {} {} 2>/dev/null | tee -a MongoDB_Enumeration/Nmap_Script.txt".format(PORT,IP))
    #----- svn server Scan:
    if option ==23:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Subversion is one of many version control options available today. It's often abbreviated as SVN. Subversion is")
            print("\t used for maintaining current and historical versions of projects. Subversion is an open source centralized version")
            print("\t control system. It's licensed under Apache. It's also referred to as a software version and revisioning control system.")
            print("\n"+BLUE+"[+] Enter the below details to start svn server Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir SVN_Enumeration")
            print("\n\t SVN_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --script svn-brute --script-args svn-brute.repo=/svn/ -p {} {} 2>/dev/null | tee -a SVN_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using svn to list directory: "+XX)
            os.system("svn ls svn://{} 2>/dev/null | tee -a SVN_Enumeration/List_Directory.txt".format(IP))
            print("\n"+BLUE+"[+] Scanning using svn to Commit history: "+XX)
            os.system("svn log svn://{} 2>/dev/null | tee -a SVN_Enumeration/Commit_History.txt".format(IP))
            print("\n"+BLUE+"[+] Scanning using svn to Download the repository: "+XX)
            os.system("svn checkout svn://{} 2>/dev/null | tee -a SVN_Enumeration/Download_Repo.txt".format(IP))
            print("\n"+BLUE+"[+] Scanning using svn to check for the version: "+XX)
            os.system("svn checkout -r 2 svn://{} 2>/dev/null | tee -a SVN_Enumeration/Version.txt".format(IP))
    #----- SMB/NetBios Scan:
    if option ==24:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t NetBIOS stands for Network Basic Input Output System. It is a software protocol that allows applications,PCs,&")
            print("\t Desktops on a local area network (LAN) to communicate with network hardware and to transmit data across the network")
            print("\n"+BLUE+"[+] Enter the below details to start SMB/NetBios Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir SMB/NetBios_Enumeration")
            print("\n\t SMB/NetBios_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Vulnrability Scripts: "+XX)
            os.system("nmap -sV -sC -A -p {} --reason --script vuln --script smb-vuln* {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/Nmap_Scripts.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap OS discovery: "+XX)
            os.system("nmap -sV -sC -p {} --script smb-os-discovery.nse --script discovery {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/OS_Discovery.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap enum user and share: "+XX)
            os.system("nmap -sV -sC -p {} --script smb-enum-users.nse --script smb-enum-shares.nse {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/User_and_Shares.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using Nmap Protocol Script: "+XX)
            os.system("nmap -sV -sC -p {} --script discovery {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/Protocols.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Running enum4linux: "+XX)
            os.system("enum4linux -a {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/enum4linux.txt".format(IP))
            print("\n"+BLUE+"[+] Downloading nullinux: "+XX)
            os.system("git clone https://github.com/m8r0wn/nullinux && cd nullinux && sudo bash setup.sh 2>/dev/null")
            print("\n"+BLUE+"[+] Running nullinux: "+XX)
            os.system("nullinux {} 2>/dev?null | tee -a SMB/NetBios_Enumeration/nullinux.txt".format(URL))
            print("\n"+BLUE+"[+] Running crackmapexec: "+XX)
            os.system("crackmapexec smb {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/crackmapexec.txt".format(IP))
            print("\n"+BLUE+"[+] Running smbclient: "+XX)
            os.system("smbclient -L \{} 2>/dev/null | tee -a SMB/NetBios_Enumeration/smbclient.txt".format(IP))
            print("\n"+BLUE+"[+] Running smbmap: "+XX)
            os.system("smbmap -H {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/smbmap.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SMB/NetBios Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M smb -f -F 2>/dev/null | tee -a SMB/NetBios_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} smb -t 50 -s {} 2>/dev/null | tee -a SMB/NetBios_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
    #----- kerberos-sec Scan:
    if option ==25:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t The goal of Kerberoasting is to harvest TGS tickets for services that run on behalf of user accounts in the AD,")
            print("\t not computer accounts. Thus,part of these TGS tickets are encrypted with keys derived from user passwords. As a")
            print("\t consequence,their credentials could be cracked offline. You can know that a user account is being used as a service")
            print("\t because the property 'ServicePrincipalName' is not null & only a domain account that can request for TGSs is necessary")
            print("\n"+BLUE+"[+] Enter the below details to start kerberos-sec Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir kerberos_Enumeration")
            print("\n\t kerberos_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system('nmap -p {} --script=krb5-enum-users --script-args="krb5-enum-users.realm="DOMAIN"" {} 2>/dev/null | tee -a kerberos_Enumeration/Nmap_Script.txt'.format(PORT,IP))
    #----- Apache JServ Scan:
    if option ==26:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+BLUE+"[+] Enter the below details to start Apache JServ Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Apache_JServ_Enumeration")
            print("\n\t Apache_JServ_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV -n --reason --script vuln --script ajp-auth,ajp-headers,ajp-methods,ajp-request -p {} {} 2>/dev/null | tee -a Apache_JServ_Enumeration/Nmap_Script.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Bruteforce using Nmap: "+XX)
            os.system("nmap --script ajp-brute -p {} {} 2>/dev/null | tee -a Apache_JServ_Enumeration/Bruteforce.txt".format(PORT,IP))
    #----- Redis service Scan:
    if option ==27:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Redis is an open source (BSD licensed),in-memory data structure store,used as a database,cache and message")
            print("\t broker. By default and commonly Redis uses a plain-text based protocol,but you have to keep in mind that it can")
            print("\t also implement ssl/tls.")
            print("\n"+BLUE+"[+] Enter the below details to start Redis service Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir Redis_Enumeration")
            print("\n\t Redis_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -A -sV --script vuln --reason --script redis-info -p {} {} 2>/dev/null | tee -a Redis_Enumeration/Nmap_Scritps.txt".format(PORT,IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Redis service Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M redis -t {} -f -F 2>/dev/null | tee -a Redis_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} redis -t 50 -s {} 2>/dev/null | tee -a Redis_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
    #----- IPsec/IKE VPN Scan:
    if option ==28:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t IPsec is the most commonly used technology for both gateway-to-gateway (LAN-to-LAN) and host to gateway (remote access)")
            print("\t enterprise VPN solutions. IKE is a type of ISAKMP (Internet Security Association Key Management Protocol) implementation,")
            print("\t which is a framework for authentication and key exchange. IKE establishes the security association (SA) between two endpoints")
            print("\t through a three-phase process. Read More: https://book.hacktricks.xyz/pentesting/ipsec-ike-vpn-pentesting")
            print("\n"+BLUE+"[+] Enter the below details to start IPsec/IKE VPN Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir IPsec/IKE_Enumeration")
            print("\n\t IPsec/IKE_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Finding a valid transformation: "+XX)
            os.system("ike-scan -M {} 2>/dev/null | tee -a IPsec/IKE_Enumeration/Valid_Transformation.txt".format(IP))
            print("\n"+BLUE+"[+] Server fingerprinting: "+XX)
            os.system("ike-scan -M --showbackoff {} 2>/dev/null | tee -a IPsec/IKE_Enumeration/Server_Fingerprinting.txt".format(IP))
    #----- Oracle DataBase Scan:
    if option ==29:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Oracle database (Oracle DB) is a relational database management system (RDBMS) from the Oracle Corporation. When")
            print("\t enumerating Oracle the first step is to talk to the TNS-Listener that usually resides on the default port (1521/TCP,")
            print("\t -you may also get secondary listeners on 1522–1529-).")
            print("\n"+BLUE+"[+] Enter the below details to start Oracle DataBase Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir DB_Enumeration")
            print("\n\t OraclDB_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system('nmap --script "oracle-tns-version" --reason --script vuln --script=oracle-sid-brute --script=oracle-brute -p {} -T4 -sV {} 2>/dev/null | tee -a OraclDB_Enumeration/Nmap_Scripts.txt'.format(IP))
    #----- Virtual Network Computing (VNC) Scan:
    if option ==30:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t In computing,Virtual Network Computing (VNC) is a graphical desktop-sharing system that uses the Remote Frame")
            print("\t Buffer protocol (RFB) to remotely control another computer. It transmits the keyboard and mouse events from one ")
            print("\t computer to another,relaying the graphical-screen updates back in the other direction,over a network.")
            print("\n"+BLUE+"[+] Enter the below details to start Virtual Network Computing (VNC) Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir VNC_Enumeration")
            print("\n\t VNC_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title --reason --script vuln -p {} {} 2>/dev/null | tee -a VNC_Enumeration/Nmap_Script.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce VNC Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                TH=input(RED+"[+] Enter threds: "+XX)
                TYPE=str(input(RED+"[+] Medusa/Nmap/Patator/Hydra (M/N/P/H): "+XX))
                if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
                    print("\n"+BLUE+"[+] Starting Medusa"+XX)
                    os.system("medusa -U {} -P {} -h {} -M vnc -t {} -f -F 2>/dev/null | tee -a VNC_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
                if TYPE=='Nmap' or TYPE=='N' or TYPE=='n':
                    print("\n"+BLUE+"[+] Starting Nmap"+XX)
                    os.system("nmap -sV --script pgsql-brute --script-args userdb=/var/{},passdb=/var/{} -p {} {} 2>/dev/null | tee -a VNC_Enumeration/Nmap_Bruteforce.txt".format(USER,PASS,PORT,IP))
                if TYPE=='Patator' or TYPE=='P' or TYPE=='p':
                    print("\n"+BLUE+"[+] Starting Patator"+XX)
                    os.system("patator vnc_login host={} password=FILE0 0={} –t 50 –x retry:fgep!='Authentication failure' --max-retries 0 –x quit:code=0use auxiliary/scanner/vnc/vnc_login 2>/dev/null | tee -a VNC_Enumeration/Patator.txt".format(IP,PASS))
                if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
                    print("\n"+BLUE+"[+] Starting Hydra"+XX)
                    os.system("hydra -L {} -P {} {} vnc -t 50 -s {} 2>/dev/null | tee -a VNC_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
                else:
                    print("\n[X] Wrong Option")
                    exit()
    #----- netbios-ns Samba nmbd netbios-ns Scan:
    if option ==31:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t Every machine should have a name inside the NetBios network. To request a name,a machine should send a 'Name Query'")
            print("\t packet in broadcast and if anyone answer that it is already using that name,the machine can use that name. If there is")
            print("\t a Name Service server,the computer could ask the Name Service server if someone is using the name that it wants to use.")
            print("\n"+BLUE+"[+] Enter the below details to start netbios-ns Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir netbios_Enumeration")
            print("\n\t netbios_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning TCP using Nmap Scripts: "+XX)
            os.system("nmap -sV -T4 -Pn -n --script nbstat.nse -p {} {} 2>/dev/null | tee -a netbios_Enumeration/TCP_Scan.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning UDP using Nmap Scripts: "+XX)
            os.system("nmap -sU -sV -T4 -Pn -n --script nbstat.nse -p {} {} 2>/dev/null | tee -a netbios_Enumeration/UDP_Scan.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Scanning using nmblookup: "+XX)
            os.system("nmblookup -A {} 2>/dev/null | tee -a netbios_Enumeration/nmblookup.txt".format(IP))
            print("\n"+BLUE+"[+] Scanning using nbtscan: "+XX)
            os.system("nbtscan {}/30 2>/dev/null | tee -a netbios_Enumeration/nbtscan.txt".format(IP))
    #----- MySQL Scan:
    if option ==32:
            print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
            print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
            print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
            print("\n"+GREEN+"[+] Info: "+XX)
            print("\n\t MySQL is a freely available open source Relational Database Management System (RDBMS) that uses Structured Query ")
            print("\t Language (SQL).")
            print("\n"+BLUE+"[+] Enter the below details to start MySQL Enumeration: "+XX)
            IP=input(RED+"[+] Enter IP: "+XX)
            PORT=input(RED+"[+] Enter Port: "+XX)
            print("\n"+BLUE+"[+] Creating a folder to store all results"+XX)
            os.system("mkdir MySQL_Enumeration")
            print("\n\t MySQL_Enumeration Folder Created")
            print("\n"+BLUE+"[+] Scanning using Nmap Scripts: "+XX)
            os.system("nmap -sV -p {} --reason --script vuln --script mysql-audit,mysql-databases,mysql-dump-hashes,mysql-empty-password,mysql-enum,mysql-info,mysql-query,mysql-users,mysql-variables,mysql-vuln-cve2012-2122 {} 2>/dev/null | tee -a MySQL_Enumeration/Nmap_Scripts.txt".format(PORT,IP))
            print("\n"+BLUE+"[+] Brute Force Default-Creds: "+XX)
            os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt -e nsr -f mysql://{} 2>/dev/null | tee -a MySQL_Enumeration/Default-Creds.txt".format(IP))
            SCAN=str(input(BLUE+"[+] Do you want to Bruteforce MySQL Service? (Y/N): "+XX))
            if SCAN=='Y' or SCAN=='y':
                USER=input(RED+"[+] User List: "+XX)
                PASS=input(RED+"[+] Password List: "+XX)
                print("\n"+BLUE+"[+] Starting hydra: "+XX)
                os.system("hydra -L {} -P {} {} mysql -t 50 -s {} 2>/dev/null| tee -a MySQL_Enumeration/Hydra.tx".format(USER,PASS,IP,PORT))
            else:
                print("Thank You For Using Our Tool")
                exit()
    else:
        print("\n[X] Wrong Option")
        exit()
if SCAN=='2':
    print("\n\n")
    print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
    print("\t"+RED+" \t\t ═══════════════════════════════════════[ What to Crack ]════════════════════════════════════════════════ "+XX)
    print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
    print("\n")
    print("\t\t1- SSH             11- Telnet")
    print("\t\t2- FTP             12- MySQL")
    print("\t\t3- PDF             13- MsSQL")
    print("\t\t4- POP             14- Zip File")
    print("\t\t5- RDP             15- RAR File ")
    print("\t\t6- SMB             16- Keepass ")
    print("\t\t7- VNC             17- Apache Jserver")
    print("\t\t8- IMPA            18- 7z File")
    print("\t\t9- SMTP            19- WiFi .cap file")
    print("\t\t10- SNMP")
    SCAN=int(input("\n"+BLUE+"Select an option (1-19): "+XX))
    #----- SSH:
    if SCAN==1:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ SSH ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa: "+XX)
            os.system("medusa -U {} -P {} -h {} -M ssh -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting hydra: "+XX)
            os.system("hydra -L {} -P {} {} ftp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- FTP:
    if SCAN==2:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ FTP ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa: "+XX)
            os.system("medusa -U {} -P {} -h {} -M ssh -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting hydra: "+XX)
            os.system("hydra -L {} -P {} {} ftp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- PDF:
    if SCAN==3:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ PDF ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        TYPE=str(input(RED+"[+] pdfcrack/qpdf/pdf2john/hashcat (P/Q/J/H): "+XX))
        if TYPE=='pdfcrack' or TYPE=='P' or TYPE=='p':
            print("\n"+BLUE+"[+] Starting pdfcrack: "+XX)
            os.system("apt-get install pdfcrack")
            os.system("pdfcrack {} -w {} 2>/dev/null".format(FILE,WORD))
        if TYPE=='qpdf' or TYPE=='Q' or TYPE=='q':
            print("\n"+BLUE+"[+] Starting pdfcrack: "+XX)
            os.system("apt-get install qpdf")
            os.system("qpdf --password={} --decrypt {} plaintext.pdf 2>/dev/null".format(WORD,FILE))
            print("\n"+BLUE+"[+] Your File Is plaintext.pdf"+XX)
        if TYPE=='pdf2john' or TYPE=='J' or TYPE=='j':
            print("\n"+BLUE+"[+] Starting pdf2john: "+XX)
            os.system("perl /usr/share/john/pdf2john.pl {} | tee pdf_hash 2>/dev/null".format(FILE))
            os.system("john pdf_hash --wordlist={} 2>/dev/null".format(WORD))
        if TYPE=='hashcat' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting hashcat: "+XX)
            os.system("perl /usr/share/john/pdf2john.pl {} | tee pdf_hash 2>/dev/null".format(FILE))
            os.system("hashcat -m 10500 pdf_hash --wordlist={} --force 2>/dev/null".format(WORD))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- POP3:
    if SCAN==4:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ══════════════════════════════════════════[ POP3 ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        print("\n"+BLUE+"[+] Starting hydra: "+XX)
        os.system("hydra -S -v -L {} -P {} -s {} -f {} pop3 -V 2>/dev/null".format(USER,PASS,PORT,IP))
    #----- RDP:
    if SCAN==5:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ RDP ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M rdp -t {} -f -F 2>/dev/null | tee -a RDP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} rdp -t 50 -s {} 2>/dev/null | tee -a RDP_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- SMB:
    if SCAN==6:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ SMB ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M smb -f -F 2>/dev/null | tee -a SMB/NetBios_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} smb -t 50 2>/dev/null | tee -a SMB/NetBios_Enumeration/Hydra.txt".format(USER,PASS,IP))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- VNC:
    if SCAN==7:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ VNC ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Nmap/Patator/Hydra (M/N/P/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M vnc -t {} -f -F 2>/dev/null | tee -a VNC_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Nmap' or TYPE=='N' or TYPE=='n':
            print("\n"+BLUE+"[+] Starting Nmap"+XX)
            os.system("nmap -sV --script pgsql-brute --script-args userdb=/var/{},passdb=/var/{} -p {} {} 2>/dev/null | tee -a VNC_Enumeration/Nmap_Bruteforce.txt".format(USER,PASS,PORT,IP))
        if TYPE=='Patator' or TYPE=='P' or TYPE=='p':
            print("\n"+BLUE+"[+] Starting Patator"+XX)
            os.system("patator vnc_login host={} password=FILE0 0={} –t 50 –x retry:fgep!='Authentication failure' --max-retries 0 –x quit:code=0use auxiliary/scanner/vnc/vnc_login 2>/dev/null | tee -a VNC_Enumeration/Patator.txt".format(IP,PASS))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} vnc -t 50 -s {} 2>/dev/null | tee -a VNC_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- IMAP:
    if SCAN==8:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ IMAP ]═════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M imap -t {} -f -F 2>/dev/null | tee -a IMAP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} imap -s {} 2>/dev/null | tee -a IMAP_Enumeration/Hydra".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- SMTP:
    if SCAN==9:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ SMTP ]═════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M smtp -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} smtp -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- SNMP:
    if SCAN==10:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ SNMP ]═════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M smb -f -F -t {} 2>/dev/null | tee -a SNMP_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} smb -t 50 -s {} 2>/dev/null | tee -a SNMP_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- Telnet:
    if SCAN==11:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ══════════════════════════════════════════[ Telnet ]════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M telnet -t {} -f -F 2>/dev/null | tee -a Telnet_Enumeration/Medusa.txt".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} telnet -t 50 -s {} 2>/dev/null | tee -a Telnet_Enumeration/Hydra.txt".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- MySQL:
    if SCAN==12:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ MySQL ]════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX)
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        print("\n"+BLUE+"[+] Starting hydra: "+XX)
        os.system("hydra -L {} -P {} {} ftp -t 50 -s {} 2>/dev/null | tee -a MySQL_Enumeration/Hydra.tx".format(USER,PASS,IP,PORT))
    #----- MsSQL:
    if SCAN==13:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ MsSQL ]════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP: "+XX) 
        PORT=input(RED+"[+] Enter Port: "+XX)
        USER=input(RED+"[+] User List: "+XX)
        PASS=input(RED+"[+] Password List: "+XX)
        TH=input(RED+"[+] Enter threds: "+XX)
        TYPE=str(input(RED+"[+] Medusa/Hydra (M/H): "+XX))
        if TYPE=='medusa' or TYPE=='M' or TYPE=='m':
            print("\n"+BLUE+"[+] Starting Medusa"+XX)
            os.system("medusa -U {} -P {} -h {} -M mssql -t {} -f -F 2>/dev/null".format(USER,PASS,IP,TH))
        if TYPE=='Hydra' or TYPE=='H' or TYPE=='h':
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} mssql -t 50 -s {} 2>/dev/null".format(USER,PASS,IP,PORT))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- ZIP:
    if SCAN==14:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════════[ Zip ]═════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        TYPE=str(input(RED+"[+] zip2john/john/fcrackzip (Z/J/F): "+XX))
        if TYPE=='zip2john' or TYPE=='Z' or TYPE=='z':
            print("\n"+BLUE+"[+] Starting zip2john: "+XX)
            os.system("zip2john {} > zip.hash 2>/dev/null".format(FILE))
            os.system("john --wordlist={} zip.hash 2>/dev/null".format(WORD))
        if TYPE=='john' or TYPE=='J' or TYPE=='j':
            print("\n"+BLUE+"[+] Starting john: "+XX)
            os.system("john --wordlist={} {} 2>/dev/null".format(WORD,FILE))
        if TYPE=='fcrackzip' or TYPE=='F' or TYPE=='f':
            print("\n"+BLUE+"[+] Starting fcrackzip: "+XX)
            os.system("fcrackzip -u -D -p '{}' {} 2>/dev/null".format(WORD,FILE))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- RAR:
    if SCAN==15:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════════[ RAR ]══════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        TYPE=str(input(RED+"[+] rar2john/john (R/J): "+XX))
        if TYPE=='rar2john' or TYPE=='R' or TYPE=='r':
            print("\n"+BLUE+"[+] Starting rar2john: "+XX)
            os.system("rar2john {} > rar.hash 2>/dev/null".format(FILE))
            os.system("john --wordlist={} rar.hash 2>/dev/null".format(WORD))
        if TYPE=='john' or TYPE=='J' or TYPE=='j':
            print("\n"+BLUE+"[+] Starting john: "+XX)
            os.system("john --wordlist={} {} 2>/dev/null".format(WORD,FILE))
        else:
            print("\n[X] Wrong Option")
            exit()
    #----- Keepass:
    if SCAN==16:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ══════════════════════════════════════════[ Keepass ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        print("\n"+BLUE+"[+] Starting keepass2john: "+XX)
        os.system("keepass2john {} > Keepasshash.txt 2>/dev/null".format(FILE))
        os.system("john --wordlist={} KeepassHash.txt 2>/dev/null".format(WORD))
    #----- Apache:
    if SCAN==17:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ═══════════════════════════════════════[ Apache Jserver ]═══════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Starting Nmap: "+XX)
        os.system("nmap --script ajp-brute -p {} {}2>/dev/null".format(PORT,IP))
    #----- .7z:
    if SCAN==18:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════════[ .7z ]═════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        print("\n"+BLUE+"[+] Starting 7z2john: "+XX)
        os.system("apt-get install libcompress-raw-lzma-perl 2>/dev/null")
        os.system("7z a {} *.wav -peasy 2>/dev/null".format(FILE))
        os.system("/usr/share/john/7z2john.pl {} > 7z.hash 2>/dev/null".format(FILE))
        os.system("john 7z.hash --wordlist={} 2>/dev/null".format(WORD))
    #----- WiFI:
    if SCAN==19:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ══════════════════════════════════════════[ WiFi.cap ]══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print(RED+" ONLY FOR .cap FILE")
        FILE=input(RED+"[+] File Path: "+XX)
        WORD=input(RED+"[+] Wordlist: "+XX)
        print("\n"+BLUE+"[+] Starting aircrack-ng: "+XX)
        os.system("apt-get install libcompress-raw-lzma-perl 2>/dev/null")
        os.system("aircrack-ng {} –w {} 2>/dev/null".format(FILE,WORD))
else:
    print("\n[X] Wrong Option")
    exit()
