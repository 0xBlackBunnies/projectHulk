#!/usr/bin/env pyhton3
# -*- coding: utf-8 -*-
import os
import time
#------------------> Color Code:
RED="\033[01;31m"
BLUE="\033[0;37;44m"
GREEN="\033[01;32;40m"
XX="\033[0m" #--- COLSE COLOR
#------------------>Banner:  
print("\n")
print("\n")
banner ="""
              ▄▄▄▄▄▄▄▄▄▄▄▄                
            ████████████████              
          ███████████████████▌         ██╗███╗  ██╗ ██████╗██████╗ ███████╗ █████╗ ████████╗ █████╗ ██████╗       ██╗  ██╗██╗   ██╗██╗     ██╗  ██╗
        ▐██████████████████████        ██║████╗ ██║██╔════╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗      ██║  ██║██║   ██║██║     ██║ ██╔╝
          ▀▀▀▀████████████▀▀▀▀         ██║██╔██╗██║╚█████╗ ██████╔╝█████╗  ██║  ╚═╝   ██║   ██║  ██║██████╔╝█████╗███████║██║   ██║██║     █████═╝
    ▄▄▄██                      ██▄▄▄   ██║██║╚████║ ╚═══██╗██╔═══╝ ██╔══╝  ██║  ██╗   ██║   ██║  ██║██╔══██╗╚════╝██╔══██║██║   ██║██║     ██╔═██╗
  ████████▄▄▄▄▄▄        ▄▄▄▄▄▄████████ ██║██║ ╚███║██████╔╝██║     ███████╗╚█████╔╝   ██║   ╚█████╔╝██║  ██║      ██║  ██║╚██████╔╝███████╗██║ ╚██╗
      ▀▀▀██████████████████████▀▀▀     ╚═╝╚═╝  ╚══╝╚═════╝ ╚═╝     ╚══════╝ ╚════╝    ╚═╝    ╚════╝ ╚═╝  ╚═╝      ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═╝
                                       ═══════════════════════════════════════════════════════════════════════════{\033[01;31mService Enumeration Script v1.0\033[0m}
                                       Tʜɪs sᴄʀɪᴘᴛ ɪs ᴏɴᴇ ᴏғ ᴘʀᴏᴊᴇᴄᴛHULK sᴄʀɪᴘᴛs, ɪᴛ ʜᴀs ʙᴇᴇɴ ᴅᴇsɪɢɴᴇᴅ ᴛᴏ ғᴀsᴛ ʏᴏᴜʀ ᴇɴᴜᴍᴇʀᴀᴛɪᴏɴ ᴀɴᴅ sᴄᴀɴɴɪɴɢ ᴘʀᴏᴄᴇss.
         █                  █          Pʟᴇᴀsᴇ ɴᴏᴛᴇ ᴛʜᴀᴛ ᴛʜɪs sᴄʀɪᴘᴛ ʜᴀs ʙᴇᴇɴ ᴡʀɪᴛᴛᴇɴ ʙᴀsᴇᴅ ᴏɴ ᴛʜᴇ ᴀᴜᴛʜᴏʀ ᴘᴏɪɴᴛ ᴏғ ᴠɪᴇᴡ. Fᴇᴇʟ ғʀᴇᴇ ᴛᴏ ᴄᴏɴᴛᴀᴄᴛ ᴍᴇ ʙᴀᴄᴋ 
          █    ██▀▀▀▀██    █           ᴛᴏ ɪᴍᴘʀᴏᴠᴇ ᴛʜᴇ sᴄʀɪᴘᴛ ғᴏʀ ᴀ ʙᴇᴛᴛᴇʀ ʀᴇsᴜʟᴛ.
           █  ▀        ▀  █               
            ██▄████████▄██
              ▀████████▀
                 ████
"""
print(banner)
time.sleep(1)
print(""+BLUE+"Author:"+XX)
time.sleep(0.1)
print("\t     Iʀᴏɴ Hᴜʟᴋ")
print("\tMᴀɴ Iɴ A Bʟᴀᴄᴋ Tᴜxᴇᴅᴏ")
time.sleep(0.1)
print("\n"+BLUE+"Tweet Me:"+XX)
time.sleep(0.1)
print("\tɪʀᴏɴʜᴜʟᴋ_x69")
print("\n"+BLUE+"Sponsor:"+XX)
time.sleep(0.1)
print("\tGɪᴛHᴜʙ: 0xBʟᴀᴄᴋBᴜɴɴɪᴇs")
print("\tTᴇʟᴇɢʀᴀᴍ: https://t.me/ForCyber")
print("\n"+BLUE+"NOTE:"+XX)
time.sleep(0.1)
print("\tYᴏᴜ ᴀʀᴇ ʀᴜɴɴɪɴɢ ᴏɴ ʙᴇᴛᴀ ᴠᴇʀsɪᴏɴ, ᴘʟᴇᴀsᴇ ʀᴇᴘᴏʀᴛ ᴜs ʙᴀᴄᴋ ᴛᴏ sᴏʟᴠᴇ ᴀʟʟ ᴋɪɴᴅ ᴏғ ɪssᴜᴇs")
time.sleep(5)
print("\n")
print(RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
print(RED+" \t\t ══════════════════════════════════════════[ Scanning The Network ]══════════════════════════════════════ "+XX)
print(RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
print("\n"+BLUE+"[+] Scaning Network using masscan:"+XX)
IP=input(RED+"[+] Enter IP/Network:"+XX)
INTR=input(RED+"[+] Set the Interface:"+XX)
os.system("masscan -e {} -p1-65535,U:1-65535 --rate=1000 {}".format(INTR, IP))
print("\n")
print(RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
print(RED+" \t\t ════════════════════════════════════════[ What Do you want to scan ]════════════════════════════════════ "+XX)
print(RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
print("\n")
print("\t\t1- Web             11- NNTP               21- WP Scan                         31- netbios-ns Samba nmbd netbios-ns")
print("\t\t2- SSH             12- IMAP               22- MongoDB")
print("\t\t3- IRC             13- LDAP               23- svn server")
print("\t\t4- FTP             14- MsSQL              24- SMB/NetBios")
print("\t\t5- DNS             15- MSRPC              25- kerberos-sec")
print("\t\t6- RDP             16- Rsync              26- Apache JServ")
print("\t\t7- TFTP            17- Finger             27- Redis service")
print("\t\t8- SMTP            18- Telnet             28- IPsec/IKE VPN")
print("\t\t9- POP3            19- Rlogin             29- Oracl DataBase")
print("\t\t10- SNMP           20- Docker             30- Virtual Network Computing (VNC)")
option=int(input("\n"+BLUE+"Select an option (1-31):"+XX))
#----- Web Scan:
if option ==1: 
    print("1- WAF Scan")
    print("2- Nmap Scan")
    print("3- fuff Scan")
    print("4- CURL Scan")
    print("5- CEWL Scan")
    print("6- Nikto Scan")
    print("7- WebDav Scan")
    print("8- Drupal Scan")
    print("9- Whatweb Scan")
    print("10- Shellshock Scan")
    print("11- All the above scan")
    SCAN=int(input("\n"+BLUE+"Select your Scan:"+XX))
    if SCAN==1:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ WAF Scan ]════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Scaning using waffw00f:"+XX)
        os.system("wafw00f -a {} 2>/dev/null".format(URL))
        print("\n"+BLUE+"[+] Scaning using Nmap waf-detect:"+XX)
        os.system("nmap -p {} --script http-waf-detect {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-waf-detect.nse:"+XX)
        os.system("nmap -p {} --script http-waf-detect.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-waf-fingerprint:"+XX)
        os.system("nmap -p {} --script http-waf-fingerprint {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-webdav-scan:"+XX)
        os.system("nmap -p {} --script http-webdav-scan {} 2>/dev/null".format(PORT, IP))
    elif SCAN==2:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Nmap Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Nmap using http-enum script:"+XX)
        os.system("nmap -sV --script=http-enum -p {} {} 2>/dev/null".format(PORT, IP)) 
        print("\n"+BLUE+"[+] Nmap Using vuln script:"+XX)
        os.system("nmap -sV --script vuln -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using vuln* script:"+XX)
        os.system("nmap --script=http-vuln* -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using reson script:"+XX)
        os.system("nmap -A --reason -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using ssl-heartbleed script:"+XX)
        os.system("nmap --script ssl-heartbleed -p {} {} 2>/dev/null".format(PORT, IP))
    elif SCAN==3:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Directory Scan ]══════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        WORD=input(RED+"[+] Path To Wordlist:"+XX)
        print("\n"+BLUE+"[+] Using fuff:"+XX)
        os.system("ffuf -c -w {} -u {}/FUZZ -t 200".format(WORD, URL))
    elif SCAN==4:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ CURL Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Starting CURL:"+XX)
        os.system("curl -i -L {} 2>/dev/null".format(URL))
        print("\n"+BLUE+"[+] Is put allowed on the directory:"+XX)
        os.system("curl --head -X OPTIONS {} 2>/dev/null".format(URL))
    elif SCAN==5:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ CEWL Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Creating Custom List:"+XX)
        os.system("cewl {} --with-numbers > custom.txt".format(URL))
        print("\n"+BLUE+"[+] Scaning for Directory:"+XX)
        os.system("ffuf -c -w custom.txt -u {}/FUZZ -t 200".format(URL))
    elif SCAN==6:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Nikto Scan ]══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Starting Nikto Scan:"+XX)
        os.system("nikto -h {} 2>/dev/null".format(URL))
    elif SCAN==7:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ WebDav Scan ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Starting davtest Scan:"+XX)
        os.system("davtest -url {}/dev".format(URL))
    elif SCAN==8:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Drupal Scan ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Starting Drupal Scan:"+XX)
        os.system("nmap -p {} --script http-drupal-enum {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Downloading Droopscan:"+XX)
        os.system("git clone https://github.com/droope/droopescan.git && cd droopescan && pip3 install . 2>/dev/null")
        print("\n"+BLUE+"[+] Running Droopscan:"+XX)
        os.system("droopescan scan drupal -u {}/ -t 32".format(URL))
    elif SCAN==9:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Whatweb Scan ]════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        print("\n"+BLUE+"[+] Starting whatweb Scan:"+XX)
        os.system("whatweb -a 3 {} -v".format(URL))
    elif SCAN==10:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Shellshcok Scan ]═════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scanning with namp:"+XX)
        os.system("nmap -p {} --script=http-shellshock {} --script-args uri=/cgi-bin/".format(PORT, IP))
    elif SCAN==11:
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        PROTO=input(RED+"[+] Protocol HTTP/HTTPS:"+XX)
        URL=input(RED+"[+] Enter URL:"+XX)
        WORD=input(RED+"[+] Path To Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using waffw00f:"+XX)
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ WAF Scan ]════════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Scaning using waffw00f:"+XX)
        os.system("wafw00f -a {} 2>/dev/null".format(URL))
        print("\n"+BLUE+"[+] Scaning using Nmap waf-detect:"+XX)
        os.system("nmap -p {} --script http-waf-detect {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-waf-detect.nse"+XX)
        os.system("nmap -p {} --script http-waf-detect.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-waf-fingerprint:"+XX)
        os.system("nmap -p {} --script http-waf-fingerprint {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap http-webdav-scan:"+XX)
        os.system("nmap -p {} --script http-webdav-scan {} 2>/dev/null".format(PORT, IP))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Nmap Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Nmap using http-enum script:"+XX)
        os.system("nmap -sV --script=http-enum -p {} {} 2>/dev/null".format(PORT, IP)) 
        print("\n"+BLUE+"[+] Nmap Using vuln script:"+XX)
        os.system("nmap -sV --script vuln -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using vuln* script:"+XX)
        os.system("nmap --script=http-vuln* -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using reson script:"+XX)
        os.system("nmap -A --reason -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Nmap Using ssl-heartbleed script:"+XX)
        os.system("nmap --script ssl-heartbleed -p {} {} 2>/dev/null".format(PORT, IP))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Directory Scan ]══════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Using fuff:"+XX)
        os.system("ffuf -c -w {} -u {}/FUZZ -t 200".format(WORD, URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ CURL Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        os.system("curl -i -L {} 2>/dev/null".format(URL))
        print("\n"+BLUE+"[+] Is put allowed on the directory"+XX)
        os.system("curl --head -X OPTIONS {} 2>/dev/null".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ CEWL Scan ]═══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Creating Custom List:"+XX)
        os.system("cewl {} --with-numbers > custom.txt".format(URL))
        print("\n"+BLUE+"[+] Scaning for Directory"+XX)
        os.system("ffuf -c -w custom.txt -u {}/FUZZ -t 200".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Nikto Scan ]══════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Starting Nikto Scan:"+XX)
        os.system("nikto -h {} 2>/dev/null".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ WebDav Scan ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Starting davtest Scan:"+XX)
        os.system("davtest -url {}/dev".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Drupal Scan ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Starting Drupal Scan:"+XX)
        os.system("nmap -p {} --script http-drupal-enum {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Downloading Droopscan:"+XX)
        os.system("git clone https://github.com/droope/droopescan.git && cd droopescan && pip3 install . 2>/dev/null")
        print("\n"+BLUE+"[+] Running Droopscan:"+XX)
        os.system("droopescan scan drupal -u {}/ -t 32".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Whatweb Scan ]════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Starting whatweb Scan:"+XX)
        os.system("whatweb -a 3 {} -v".format(URL))
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Shellshcok Scan ]═════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Scanning with namp:"+XX)
        os.system("nmap -p {} --script=http-shellshock {} --script-args uri=/cgi-bin/".format(PORT, IP))
    else:
        print("Thank You For Using Our Tool")
#----- SSH Scan:
if option ==2:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start SSH Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -p {} -n --script=ssh-hostkey --script vuln --script ssh2-enum-algos {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap Vuln Scripts:"+XX)
        os.system("nmap -p {} -sV --reason --script vuln {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap Vesrion Scripts:"+XX)
        os.system("nmap -p {} -sV --version-all -sC {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Brute Force Default-Creds:"+XX)
        os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/ssh-betterdefaultpasslist.txt -e nsr -f ssh://{} 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SSH Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa:"+XX)
                os.system("medusa -U {} -P {} -h {} -M ssh -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting hydra:"+XX)
                os.system("hydra -L {} -P {} {} ftp -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- IRC Scan:
if option ==3:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start IRC Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts on defualt ports:"+XX)
        os.system("nmap -sV -p 194,6660-7000 --reason --script vuln {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Scaning for backdoor on defualt ports:"+XX)
        os.system("nmap -sV --script irc-botnet-channels,irc-info,irc-unrealircd-backdoor -p 194,6660-7000 {} 2>/dev/null".format(IP))
#----- FTP Scan:
if option ==4:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start FTP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap vuln Script:"+XX)
        os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"+]Scaning using Nmap ftp* Script:"+XX)
        os.system("nmap --script=ftp-* -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Brute Force Default-Creds"+XX)
        os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt {} ftp -t 50 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce FTP Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            print("\n"+BLUE+"[+] Starting Hydra"+XX)
            os.system("hydra -L {} -P {} {} ftp -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- DNS Scan:
if option ==5:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start DNS Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        DOMAIN=IP=input(RED+"[+] Enter Domain:"+XX)
        SUB=IP=input(RED+"[+] Subdomain Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap dns-nsid Script:"+XX)
        os.system("nmap --script dns-nsid -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap vuln Script:"+XX)
        os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] UDP Scan:"+XX)
        os.system("nmap -sS -sU -p {} -n {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] dnsenum scan:"+XX)
        os.system("dnsenum -enum {} 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] Subdomain:"+XX)
        os.system("dnsenum -f {} -u a -r {} 2>/dev/null".format(SUB,DOMAIN))
        print("\n"+BLUE+"[+] Whois result:"+XX)
        os.system("whois {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Host result:"+XX)
        os.system("host {} 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] Host nameserver result:"+XX)
        os.system("host -t ns {} 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] Host mailexchange result:"+XX)
        os.system("host -t mx {} 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] dig Get IP result:"+XX)
        os.system("dig {} 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] dig nameserver result:"+XX)
        os.system("dig {} NS 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] Get TXT records:"+XX)
        os.system("dig {} TXT 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] DIG all the things:"+XX)
        os.system("dig {} ANY 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] dig Find Zone Transfer result:"+XX)
        os.system("dig axfr @{} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] dnsrecon result:"+XX)
        os.system("dnsrecon -d {} -g 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] dns bruteforce result:"+XX)
        os.system("dnsrecon -d {} -D /usr/share/wordlists/dnsmap.txt -t std 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] Find Virtual Host by fiercon:"+XX)
        os.system("fiercon -dns abc.com 2>/dev/null".format(DOMAIN))
        print("\n"+BLUE+"[+] nslookup result:"+XX)
        os.system("nslookup")
        os.system("set querytype=any")
        os.system("SERVER {}".format(IP))
        os.system("{}} 2>/dev/null".format(IP))
#----- RDP Scan:
if option ==6:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start RDP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        DOMAIN=IP=input(RED+"[+] Enter Domain:"+XX)
        SUB=IP=input(RED+"[+] Subdomain Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Script:"+XX)
        os.system('nmap --reason --script vuln --script "rdp-enum-encryption or rdp-vuln-ms12-020 or rdp-ntlm-info" -p {} -T4 {} 2>/dev/null'.format(PORT, IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce RDP Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M rdp -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} rdp -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- TFTP Scan:
if option ==7:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start TFTP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Script:"+XX)
        os.system("nmap -n -Pn -sU -p {} -sV --script vuln --script tftp-enum {} 2>/dev/null".format(PORT, IP))
#----- SMTP Scan:
if option ==8:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start SMTP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        WORD=input(RED+"[+] Path To Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap smtp-commands Script:"+XX)
        os.system("nmap -p {} --script smtp-commands {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap smtp-enum-users.nse Script:"+XX)
        os.system("nmap -p {} --script smtp-enum-users.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap vuln Script:"+XX)
        os.system("nmap -p {} --reason --script vuln {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] smtp-user-enum using custom wordlist:"+XX)
        os.system("smtp-user-enum -M VRFY -U {} -t {} 2>/dev/null".format(WORD,IP))
        print("\n"+BLUE+"[+] smtp-user-enum using unix_users.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] smtp-user-enum using names.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/Names/names.txt -t {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] smtp-user-enum using top-usernames-shortlist.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top-usernames-shortlist.txt -t {} 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SMTP Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M smtp -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} smtp -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- POP3 Scan:
if option ==9:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start POP3 Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        WORD=input(RED+"[+] Path To Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap pop3-ntlm-info Script:"+XX)
        os.system("nmap -p {} --script pop3-ntlm-info {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap vuln Script:"+XX)
        os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap vuln Script:"+XX)
        os.system("nmap -p {} --reason --script vuln {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] smtp-user-enum using custom wordlist:"+XX)
        os.system("smtp-user-enum -M VRFY -U {} -t {} 2>/dev/null".format(WORD,IP))
        print("\n"+BLUE+"[+] smtp-user-enum using unix_users.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/metasploit-framework/data/wordlists/unix_users.txt -t {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] smtp-user-enum using names.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/Names/names.txt -t {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] smtp-user-enum using top-usernames-shortlist.txt:"+XX)
        os.system("smtp-user-enum -M VRFY -U /usr/share/seclists/Usernames/top-usernames-shortlist.txt -t {} 2>/dev/null".format(IP))
#----- SNMP Scan:
if option ==10:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start SNMP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        WORD=input(RED+"[+] Path To Wordlist:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV -sC -p {} --reason --script vuln {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap nbstat.nse Script:"+XX)
        os.system("nmap -sV -sC -p {} --script nbstat.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap os-discovery Script:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-os-discovery.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap enum-users Script:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-enum-users.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap protocols Script:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-protocols {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Scaning using Nmap enum-shares Script:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-enum-shares.nse {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Running enum4linux:"+XX)
        os.system("enum4linux -a {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Downloading nullinux:"+XX)
        os.system("git clone https://github.com/m8r0wn/nullinux && cd nullinux && sudo bash setup.sh 2>/dev/null")
        print("\n"+BLUE+"[+] Running nullinux:"+XX)
        os.system("nullinux {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Running crackmapexec:"+XX)
        os.system("crackmapexec smb {} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Running smbclient:"+XX)
        os.system("smbclient -L \{} 2>/dev/null".format(PORT, IP))
        print("\n"+BLUE+"[+] Running smbmap:"+XX)
        os.system("smbmap -H {} 2>/dev/null".format(PORT, IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SNMP Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M smb -f -F -t {} 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} smb 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- NNTP Scan:
if option ==11:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start NNTP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -p {} --script nntp-ntlm-info --reason --script vuln {} 2>/dev/null".format(PORT, IP))
#----- IMAP Scan:
if option ==12:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start IMAP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV -p {} --reason --script vuln --script imap-capabilities,imap-ntlm-info {} 2>/dev/null".format(PORT, IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce IMAP Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M imap -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} imap -s {} 2>/dev/null".format(USER, PASS, IP, PORT))
        else:
            print("Thank You For Using Our Tool")
#----- LDAP Scan:
if option ==13:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start LDAP Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -n -sV -p {} --script 'ldap* and not brute' --reason --script vuln {} 2>/dev/null".format(PORT, IP))
#----- MsSQL Scan:
if option ==14:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start MsSQL Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port={},mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p {} {} 2>/dev/null".format(PORT,PORT,IP))
        print("\n"+BLUE+"[+] Scaning using Nmap Vuln Scripts:"+XX)
        os.system(" nmap -sV  --reason --script vuln -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Brute Force Default-Creds:"+XX)
        os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/mssql-betterdefaultpasslist.txt {} mssql -t 50 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce MsSQL Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M mssql -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} mssql -t 50 -s {} 2>/dev/null".format(USER, PASS, IP, PORT))
        else:
            print("Thank You For Using Our Tool")
#----- MSRPC Scan:
if option ==15:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start MSRPC Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -n -v -sV -Pn -p {} --script=msrpc-enum {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using rpcinfo tool:"+XX)
        os.system("rpcinfo -p {} {} 2>/dev/null".format(PORT,IP))
#----- Rsync Scan:
if option ==16:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Rsync Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --script 'rsync-list-modules' -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using rsync tool:"+XX)
        os.system("rsync -av --list-only rsync://{}/ 2>/dev/null".format(IP))
#----- Finger Scan:
if option ==17:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Finger Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        USER=input(RED+"[+] User List:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --reason --script vuln -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] List of logged in users:"+XX)
        os.system("finger @{}".format(IP))
#----- Telnet Scan:
if option ==18:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Telnet Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -n -sV -P 23 --script '*telnet* and safe' --reason --script vuln --script=telnet-ntlm-info.nse -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Brute Force Default-Creds:"+XX)
        os.system("hydra -C /usr/share/wordlists/seclists/Passwords/Default-Credentials/telnet-betterdefaultpasslist.txt -e nsr -f -s {} {} 2>/dev/null".format(PORT, IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Telnet Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M telnet -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} telnet -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- Rlogin Scan:
if option ==19:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Rlogin Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -p {} --script rlogin-brute {} 2>/dev/null".format(PORT,IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Rlogin Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M rlogin -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} rlogin -t 50 2>/dev/null".format(USER, PASS, IP))
        else:
            print("Thank You For Using Our Tool")
#----- Docker Scan:
if option ==20:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Docker Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --script 'docker-*' --reason --script vuln -p {} {} 2>/dev/null".format(PORT,IP))
#----- WP Scan:
if option ==21:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Word Press Enumeration:"+XX)
        URL=input(RED+"[+] Enter WP Path:"+XX)
        API=input(RED+"[+] Enter api-token:"+XX)
        print("\n"+BLUE+"[+] Updating Word Press DB:"+XX)
        os.system("wpscan --update")
        print("1- Full Scan")
        print("2- User Scan")
        print("3- Thems Scan")
        print("4- Plugins Scan")
        print("5- Brute force")
        SCAN=int(input("\n"+BLUE+"Select your Scan:"+XX))
        if SCAN==1:
            print("\n"+BLUE+"[+] Running Fullscan:"+XX)
            os.system("wpscan --url {} --enumerate ap,at,cb,dbe --api-token {} 2>/dev/null".format(URL, API))
        if SCAN==2:
            print("\n"+BLUE+"[+] Running User scan:"+XX)
            os.system("wpscan --url {} --enumerate u --api-token {} 2>/dev/null".format(URL, API))
        if SCAN==3:
            print("\n"+BLUE+"[+] Running Them scan:"+XX)
            os.system("wpscan --url {} --enumerate vt --api-token {} 2>/dev/null".format(URL, API))
            SCAN=str(input(BLUE+"[+] Do you want to fuzz? (Y/N):"+XX))
            if SCAN=='Y' or SCAN=='y':
                FUZZ=input(RED+"[+] Word List to use:"+XX)
                print("\n"+BLUE+"[+] Starting Fuzzing"+XX)
                os.system("wfuzz -c -w {} -t 40 --hc 404 {}/FUZZ 2>/dev/null".format(FUZZ, URL))
            else:
                print("End of scan")
        if SCAN==4:
            print("\n"+BLUE+"[+] Running Plugin Scan:"+XX)
            os.system("wpscan --url {} --enumerate vp --api-token {} 2>/dev/null".format(URL, API))
            SCAN=str(input(BLUE+"[+] Do you want to fuzz? (Y/N):"+XX))
            if SCAN=='Y' or SCAN=='y':
                FUZZ=input(RED+"[+] Word List to use:"+XX)
                print("\n"+BLUE+"[+] Starting Fuzzing"+XX)
                os.system("wfuzz -c -w {} -t 40 --hc 404 {}/FUZZ  2>/dev/null".format(FUZZ, URL))
            else:
                print("End of scan")
        if SCAN==5:
            NAME=input(RED+"[+] User List Path:"+XX)
            PASS=input(RED+"[+] Pass List Path:"+XX)
            print("\n"+BLUE+"[+] Scan, Enumerate users and Brutforce them:"+XX)
            os.system("wpscan --url {} --passwords {} -t 100 2>/dev/null".format(URL,PASS))
            print("\n"+BLUE+"[+] Running Bruteforce Scan:"+XX)
            os.system("wpscan --url {} --usernames {} -P {} -t 100 2>/dev/null".format(URL,NAME,PASS))
        else:
            print("Thank You For Using Our Tool")
#----- MongoDB Scan:
if option ==22:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start MongoDB Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --script 'mongo* and default' -p {} {} 2>/dev/null".format(PORT,IP))
#----- svn server Scan:
if option ==23:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start svn server Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --script svn-brute --script-args svn-brute.repo=/svn/ -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using svn to list directory:"+XX)
        os.system("svn ls svn://{} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Scaning using svn to Commit history:"+XX)
        os.system("svn log svn://{} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Scaning using svn to Download the repository:"+XX)
        os.system("svn checkout svn://{} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Scaning using svn to check for the version:"+XX)
        os.system("svn checkout -r 2 svn://{} 2>/dev/null".format(IP))
#----- SMB/NetBios Scan:
if option ==24:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start SMB/NetBios Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Vulnrability Scripts:"+XX)
        os.system("nmap -sV -sC -A -p {} --reason --script vuln --script smb-vuln* {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using Nmap OS discovery:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-os-discovery.nse --script discovery {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using Nmap enum user and share:"+XX)
        os.system("nmap -sV -sC -p {} --script smb-enum-users.nse --script smb-enum-shares.nse {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using Nmap Protocol Script:"+XX)
        os.system("nmap -sV -sC -p {} --script discovery {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Running enum4linux:"+XX)
        os.system("enum4linux -a {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Downloading nullinux:"+XX)
        os.system("git clone https://github.com/m8r0wn/nullinux && cd nullinux && sudo bash setup.sh 2>/dev/null")
        print("\n"+BLUE+"[+] Running nullinux:"+XX)
        os.system("nullinux {}".format(URL))
        print("\n"+BLUE+"[+] Running crackmapexec:"+XX)
        os.system("crackmapexec smb {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Running smbclient:"+XX)
        os.system("smbclient -L \{} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Running smbmap:"+XX)
        os.system("smbmap -H {} 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce SMB/NetBios Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M smb -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} smb -t 50 2>/dev/null".format(USER, PASS, IP))
#----- kerberos-sec Scan:
if option ==25:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start kerberos-sec Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system('nmap -p {} --script=krb5-enum-users --script-args="krb5-enum-users.realm="DOMAIN"" {} 2>/dev/null'.format(PORT,IP))
#----- Apache JServ Scan:
if option ==26:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Apache JServ Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV -n --reason --script vuln --script ajp-auth,ajp-headers,ajp-methods,ajp-request -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Bruteforce using Nmap:"+XX)
        os.system("nmap --script ajp-brute -p {} {} 2>/dev/null".format(PORT,IP))
#----- Redis service Scan:
if option ==27:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Redis service Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -A -sV --script vuln --reason --script redis-info -p {} {} 2>/dev/null".format(PORT,IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce Redis service Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M redis -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} redis -t 50 2>/dev/null".format(USER, PASS, IP))
#----- IPsec/IKE VPN Scan:
if option ==28:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start IPsec/IKE VPN Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Finding a valid transformation:"+XX)
        os.system("ike-scan -M {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Server fingerprinting:"+XX)
        os.system("ike-scan -M --showbackoff {} 2>/dev/null".format(IP))
#----- Oracl DataBase Scan:
if option ==29:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Oracl DataBase Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system('nmap --script "oracle-tns-version" --reason --script vuln  -p {} -T4 -sV {} 2>/dev/null'.format(IP))
        print("\n"+BLUE+"[+] Server fingerprinting:"+XX)
        os.system("ike-scan -M --showbackoff {} 2>/dev/null".format(IP))
#----- Virtual Network Computing (VNC) Scan:
if option ==30:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start Virtual Network Computing (VNC) Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning using Nmap Scripts:"+XX)
        os.system("nmap -sV --script vnc-info,realvnc-auth-bypass,vnc-title --reason --script vuln -p {} {} 2>/dev/null".format(IP))
        SCAN=str(input(BLUE+"[+] Do you want to Bruteforce VNC Service? (Y/N):"+XX))
        if SCAN=='Y' or SCAN=='y':
            USER=input(RED+"[+] User List:"+XX)
            PASS=input(RED+"[+] Password List:"+XX)
            TH=input(RED+"[+] Enter threds:"+XX)
            TYPE=str(input(RED+"[+] Medusa/Nmap/Patator/Hydra: "))
            if TYPE=='medusa' or TYPE=='m':
                print("\n"+BLUE+"[+] Starting Medusa"+XX)
                os.system("medusa -U {} -P {} -h {} -M vnc -t {} -f -F 2>/dev/null".format(USER, PASS, IP, TH))
            if TYPE=='Nmap' or TYPE=='nmap':
                print("\n"+BLUE+"[+] Starting Nmap"+XX)
                os.system("nmap -sV --script pgsql-brute --script-args userdb=/var/{},passdb=/var/{} -p {} {} ".format(USER, PASS, PORT, IP))
            if TYPE=='Patator' or TYPE=='p' or TYPE=='P':
                print("\n"+BLUE+"[+] Starting Patator"+XX)
                os.system("patator vnc_login host={} password=FILE0 0={} –t 50 –x retry:fgep!='Authentication failure' --max-retries 0 –x quit:code=0use auxiliary/scanner/vnc/vnc_login 2>/dev/null".format(IP, PASS))
            else:
                print("\n"+BLUE+"[+] Starting Hydra"+XX)
                os.system("hydra -L {} -P {} {} vnc -t 50 2>/dev/null".format(USER, PASS, IP))
#----- netbios-ns Samba nmbd netbios-ns Scan:
if option ==31:
        print("\t"+RED+" \t\t╔════════════════════════════════════════════════════════════════════════════════════════════════════════╗"+XX)
        print("\t"+RED+" \t\t ════════════════════════════════════════[ Enumeration ]═════════════════════════════════════════════════ "+XX)
        print("\t"+RED+" \t\t╚════════════════════════════════════════════════════════════════════════════════════════════════════════╝"+XX)
        print("\n"+BLUE+"[+] Enter the below details to start netbios-ns Samba nmbd netbios-ns Enumeration:"+XX)
        IP=input(RED+"[+] Enter IP:"+XX)
        PORT=input(RED+"[+] Enter Port:"+XX)
        print("\n"+BLUE+"[+] Scaning TCP using Nmap Scripts:"+XX)
        os.system("nmap -sV -T4 -Pn -n --script nbstat.nse -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning UDP using Nmap Scripts:"+XX)
        os.system("nmap -sU -sV -T4 -Pn -n --script nbstat.nse -p {} {} 2>/dev/null".format(PORT,IP))
        print("\n"+BLUE+"[+] Scaning using nmblookup:"+XX)
        os.system("nmblookup -A {} 2>/dev/null".format(IP))
        print("\n"+BLUE+"[+] Scaning using nbtscan:"+XX)
        os.system("nbtscan {}/30 2>/dev/null".format(IP))
        
